---
layout: post
list_title:  WWDC 2014 Notes
title: WWDC 2014 Notes
categories: [iOS]
---

## Session 407

### id and AnyObject

- Runtime Check

Swift中的`AnyObject`相当于OC中的`id`。对于`id`来说，可在运行时接收消息：

```objc
if([object respondsToSelector:@selector(removeFormSuperview)]){
	[object removeFromSuperview];
}

```
对应到Swift，使用optional来做运行时的判断

```swift
let object:AnyObject = SomeClass()
object.removeFromSuperview?()
```

- Downcasting AnyObject
	- AnyObject does not implicity downcast
	
	```swift
	let view:UIView = object //error:'AnyObject' cannot be implicitly downcast
	```
	
	- 使用"as"在运行时做类型转化
	
	```swift
	let view = object as UIView
	```
	
	- 使用"as?"
	
	```java
	if let view = object as? UIView{
		// view is UIView
	}
	```

### Implicitly Unwrapped Optionals

- From WWDC session 407:
	- A value of class type in Swift is  never nil
	- Optional types generalize the notion of nil
	- Objective-C does not have a notion of a "never nil" pointer	
	- "!" is an <em>implicitly unwrapped optional</em>
	- Can be tested explicity for nil
	- Can directly access properties/methods of the underlying value
	- Can be implicity converted to its underlying value(e.g. NSDate)

- 做成员变量:	

`var date:NSDate!`意思是，当使用`date`的时候，会隐式的unwrap，例如，当用`self.date`的时候，相当于`self.date!`。如果`date`为`nil`，那么会crash。

- 做参数:

用！声明的参数可以传`nil`这主要是为了兼容OC,由于OC中`name`允许为`nil`，对应到swift中，`name`要声明为`String!`类型，才可以接受`nil`

```objc
- (NSString* )type:(NSString* )name operation:(UIDocumentSaveOperation)op;
//swift
func type(name:String!, operation: UIDocumentSaveOperation) -> String!
```

### Protocols

- Objective-C

```objc
@protocol UITableViewDataSource<NSObject>
@optional
- (NSInteger)numberOfSectionsInTableView:(UITableView)tableview;
@required
- (NSInteger)tableView:(UITableView* )tableView numberOfRowsInSection:(NSInteger)section;
@end

@property id<UITableViewDataSource> dataSource;
```

- Swift

```swift
@objc protocol UITableViewDataSource:NSObjectProtocol{
	func tableView(tableView:UITableView, numberOfRowsInSection: Int) -> Int
	@optional func numberOfSectionsInTableView(tableView:UITableView) -> Int
}
var dataSource: UITableViewDataSource!
```

- Downcast via `as?` to protocol type

```swift
if let ds = object as? UITableViewDataSource{
	let rowsInFirstSection = ds.tableView(tableView,numberOfRowsInSection:0)
}
```
### Swift Objects are the OC objects

All Swift classes are "id compatible"

- Same layout as an Objective-C class
- Same basic infrastructure(retain/release/class/etc.)
inheriate from Objective-C class to make your class directly visible in Objective-c, 继承Objective-C class使其能够被OC运行时发现

### getters and setters

```swift
var name:String{
	get { return "b" }
	set {}
}
```

Override the property itself not the getter or setter

- getter:

```swift
override var name:String{
	return "this is my \(self.view) string"
}
```
 
### @objc

"objc" attribute verifies that the declaration can be used in Objective-C。 `objc`关键字的作用本质上是让Swift中的某个数据结构(类，方法等)在OC的运行时可见。例如，对于Swift中返回tuple的函数，对于这种类型的Swift函数，编译器会给出错误。

```swift
@objc func myGenericMethod<T>(x:T) -> (String,String){...} //error: not expressible in oc
```

在OC的runtime中改变Swift中的数据结构名称

```swift
var enabled: Bool{
	@objc(isEnabled)get{...}
	set{...}
}
```

这样在OC的runtime中，`enable`的getter方法就变为了`isEnabled`

```swift
@objc(ABCMyDocument) class MyDocument:UIDocument{

}
```
   
### Unmanaged Object

Unmanaged<T> enables manual memory management

```swift
struct Unmanaged<T:AnyObject>{

	func takeUnretainedValue() -> T
	func takeRetainedValue() -> T
}
```

Use it to work with unaudited CF APIs

```swift
let color = CGColorGetRandomColor().takeUnretainedValue()
```