I"˛C<h3 id="course-overview">Course Overview</h3>

<ul>
  <li>Internal of cloud computing</li>
  <li>Go underneath the hood and look at <strong>distributed systems</strong> that underlie today‚Äôs cloud computing technologies</li>
  <li>Part1
    <ul>
      <li>Introduction: Clouds, MapReduce, Key-Value stores</li>
      <li>Classical Precursors: P2P systems, Grids</li>
      <li>Widely-used algorithms: Gossip, Membership, Paxos</li>
      <li>Classical algorithms: Time and Ordering, Snapshots, Multicast</li>
    </ul>
  </li>
</ul>

<h3 id="overview">Overview</h3>

<ul>
  <li>Introduction to Clouds
    <ul>
      <li>Hisotory, What, Why</li>
      <li>Comparison with previous generation of distributed systems</li>
    </ul>
  </li>
  <li>Clouds are distributed systems</li>
  <li>Mapreduce and Hadoop
    <ul>
      <li>Paradigm, Examples</li>
    </ul>
  </li>
  <li>Cloud Providers
    <ul>
      <li>AWS Amazon Web Services:
        <ul>
          <li>ES2ÔºöElastic Compute Cloud</li>
          <li>S3: SImple Storage Service</li>
          <li>EBS: Elastic Block Storage</li>
        </ul>
      </li>
      <li>Microsoft Azure</li>
      <li>Google Compute Engine</li>
      <li>Many, many more</li>
    </ul>
  </li>
  <li>Four features in Today‚Äôs clouds
    <ol>
      <li><strong>Massive Scale</strong>
        <ul>
          <li>Facebook
            <ul>
              <li>30k servers in 2009</li>
              <li>60k in 2010</li>
              <li>180k in 2012</li>
            </ul>
          </li>
          <li>Microsoft has 150k servers in 2008, growth rate of 10k per month, 80K total running Bing
        - AWS EC2</li>
          <li>40k machines</li>
          <li>8 cores/machine
        - eBay</li>
          <li>50k machines</li>
        </ul>
      </li>
      <li><strong>On-demand access</strong>
        <ul>
          <li>HaaS: Hardware as a Service</li>
          <li>IaaS: Infrastructure as a Service
            <ul>
              <li>You get access to flexible computing and storage infrastructure.Virtualization is one way of achieving this</li>
              <li>Amazon EC2, S3, Microsoft AZure</li>
            </ul>
          </li>
          <li>Platform as a Service
            <ul>
              <li>You get access to flexible computing and storage, coupled with a software platform</li>
              <li>Google‚Äôs AppEngine(Python,Java,Go)</li>
            </ul>
          </li>
          <li>SaaS: Software as a Service
            <ul>
              <li>You get access to software services, when you need them.</li>
              <li>Google docs, MS Office on demand</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>Data-Intensive Nature</strong>
        <ul>
          <li>What was MBs has now become TBs, PBs and XBs</li>
        </ul>
      </li>
      <li><strong>New Cloud Programming Paradigms</strong>
        <ul>
          <li>Google: MapReduce</li>
          <li>Amazon: Elastic MapReduce service(pay as you go)</li>
          <li>Google(MapReduce)
            <ul>
              <li>Indexing a chain of 24 MapReducer Jobs</li>
              <li>200k mapreduce jobs processing 50PB/month (in 2006)</li>
            </ul>
          </li>
          <li>Yahoo(Hadoop + Pig)
            <ul>
              <li>WebMap: a chain of 100 MapReduce jobs</li>
            </ul>
          </li>
          <li>Facebook(Hadoop + Hive)
            <ul>
              <li>300 Tb total, adding 2TB/day (in 2008)</li>
              <li>3k jobs processing 55TB/day</li>
            </ul>
          </li>
          <li>NoSQL
            <ul>
              <li>MySQL is an industry standard, but Cassandra is 2400 times faster!</li>
            </ul>
          </li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<h3 id="distributed-systems">Distributed Systems</h3>

<ul>
  <li>A ‚Äúcloud‚Äù is the latest nickname for a distributed system</li>
  <li>Previous nicknames for ‚Äúdistributed system‚Äù
    <ul>
      <li>P2P systems</li>
      <li>Grids</li>
      <li>Clusters</li>
      <li>Timeshared computers(Data Processing Industry)</li>
    </ul>
  </li>
  <li>Definitions from textbooks
    <ul>
      <li>A distributed system is a collection of independent computers that appear to the uses of the system as a single computer [Andrew Tanenbaum]</li>
      <li>A distributed system is serverl computers doing something together. Thus, a distributed system has three primary characteristics: multiple computer, interconnections and share state. [Michael Schroeder]</li>
    </ul>
  </li>
  <li>A working definition of ‚ÄúDistributed System‚Äù
    <ul>
      <li>A distributed system is a collection of entities, each of which is <mark>autonomous</mark>, <mark>programmable</mark>, <mark>asynchronous</mark> and <mark>failure-prone</mark>, and which communicate through an <mark>unreliable communication</mark> medium.</li>
    </ul>
  </li>
  <li>A range of interesting problmes for distributed system designeers
    <ul>
      <li>P2P systems [Gnutella, Kazaa, BitTorrent]</li>
      <li>Cloud Infrastrutures [AWS, Azure, Google Cloud]</li>
      <li>Cloud Storage [Key-value stores, NoSQL, Cassandra]</li>
      <li>Cloud Programming [MapReduce, Storm, Pregel]</li>
      <li>Coordinations [Zookeeper, Paxos, Snapshots]</li>
      <li>Managing Many Clients and Servers Concurrently</li>
    </ul>
  </li>
</ul>

<h2 id="mapreduce">MapReduce</h2>

<ul>
  <li>Terms are borrowed from Functional Language(e.g., Lisp)
    <ul>
      <li>Sum of squares</li>
    </ul>

    <div class="language-lisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">(</span><span class="nb">map</span> <span class="nv">square</span><span class="o">'</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">))</span> 
  <span class="p">(</span><span class="nb">reduce</span> <span class="nb">+</span><span class="o">'</span><span class="p">(</span><span class="mi">1</span> <span class="mi">4</span> <span class="mi">9</span> <span class="mi">6</span><span class="p">))</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Map</strong></li>
</ul>

<p>Let‚Äôs consider a sample application: Wordcount</p>

<blockquote>
  <p>You are given a huge dataset(e.g., Wikipedia dump all of Shakespeare‚Äôs works) and asked to list the count for each of the words in each of the documents therein.</p>
</blockquote>

<p>Map process individual records to generate intermediate key/value pairs.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//input&lt;filename, file.txt&gt;
str = "Welcome every Hello Everyone" 

map(str) =&gt; {key,value} =&gt;  key         | value
                            ------------|-------
                            Welcome     | 1
                            Everyone    | 1
                            Hello       | 1
                            Everyone    | 1
</code></pre></div></div>
<ul>
  <li>Parallelly process individual records to generate intermediate key/value pairs</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>task #1: 
map(str1) =&gt; {key,value} =&gt; key         | value
                            ------------|-------
                            Welcome     | 1
                            Everyone    | 1

task #2: 
map(str2) =&gt; {key,value} =&gt; key         | value
                            ------------|-------
                            Hello       | 1
                            Everyone    | 1
</code></pre></div></div>

<ul>
  <li>Hadoop Code - map</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MapClass</span> <span class="n">extands</span> <span class="nc">MapReduceBase</span> <span class="kd">implements</span> <span class="nc">Mapper</span><span class="o">&lt;</span><span class="nc">LongWritable</span><span class="o">,</span> <span class="nc">Text</span><span class="o">,</span> <span class="nc">Text</span><span class="o">,</span> <span class="nc">IntWritable</span><span class="o">&gt;{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">IntWritable</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntWritable</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">Text</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Text</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="nc">LongWritable</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Text</span> <span class="n">value</span><span class="o">,</span> <span class="nc">OutputCollector</span><span class="o">&lt;</span><span class="nc">Text</span><span class="o">,</span><span class="nc">IntWritable</span><span class="o">&gt;</span> <span class="n">output</span><span class="o">,</span> <span class="nc">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
        <span class="nc">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
        <span class="nc">StringTokenizer</span> <span class="n">itr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
        <span class="k">while</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">()){</span>
            <span class="n">word</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">word</span><span class="o">,</span><span class="n">one</span><span class="o">);</span> <span class="c1">//&lt;key,value&gt;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><strong>Reduce</strong></li>
</ul>

<p>Reduce processes and merges all the intermediate values associated per key</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reduce(&lt;k,v&gt;) =&gt; {key,value}

key         | value            key     | value
------------|-------    =&gt;   ----------|---------
Welcome     | 1               Everyone | 2
Everyone    | 1               Hello    | 1
Hello       | 1               Welcome  | 1
Everyone    | 1
</code></pre></div></div>

<ul>
  <li>Each key assigned to one Reducer</li>
  <li>Parallelly process and merges all intermediate values by partitioning keys
    <ul>
      <li>Popular: Hash Partitioning, i.e., key is assigned to reduce# = hash(key) % #reducer servers</li>
    </ul>
  </li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">------------                       ------------
</span><span class="p">Everyone 1 |  =&gt; Reduce Task #1 =&gt; | Everyone 2
Everyone 1 |                       -------------
</span><span class="gd">------------
</span>
----------                        ------------
<span class="p">Hello   1 |  =&gt; Reduce Task #2 =&gt; | Hello   1
Welcome 1 |                       | Welcome 1
</span><span class="gd">----------                        -------------
</span></code></pre></div></div>

<ul>
  <li>Hadoop Code - Reduce</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ReduceClass</span> <span class="n">extands</span> <span class="nc">MapReduceBase</span> <span class="kd">implements</span> <span class="nc">Reducer</span><span class="o">&lt;</span><span class="nc">Text</span><span class="o">,</span><span class="nc">IntWritable</span><span class="o">,</span> <span class="nc">Text</span><span class="o">,</span><span class="nc">IntWritable</span><span class="o">&gt;{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reduce</span><span class="o">(</span><span class="nc">Text</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">IntWritable</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="nc">OutputCollector</span><span class="o">&lt;</span><span class="nc">Text</span><span class="o">,</span><span class="nc">IntWritable</span><span class="o">&gt;</span> <span class="n">output</span><span class="o">,</span> <span class="nc">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
            <span class="n">sum</span> <span class="o">+=</span> <span class="n">values</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">key</span><span class="o">,</span><span class="k">new</span> <span class="nc">IntWritable</span><span class="o">(</span><span class="n">sum</span><span class="o">));</span> <span class="c1">//&lt;key,value&gt;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="some-applications-of-mapreduce">Some Applications of MapReduce</h3>

<ul>
  <li><strong>Distributed Grep</strong>
    <ul>
      <li>Input: large set of files</li>
      <li>Output: lines that match pattern</li>
      <li>Map: Emits a line if it matches the supplied pattern</li>
      <li>Reduce: Copies the intermediate data to output</li>
    </ul>
  </li>
  <li><strong>Reverse Web-Link Graph</strong>
    <ul>
      <li>Input: Web graph: tuples(a,b) where (page a -&gt; page b)</li>
      <li>Output: For each page, list of pages that link to it</li>
      <li>Map: Process web log and for each input<code class="highlighter-rouge">&lt;source, target&gt;</code>, outputs <code class="highlighter-rouge">&lt;target, source&gt;</code></li>
      <li>Reduce: emits <code class="highlighter-rouge">&lt;target, list(source)&gt;</code></li>
    </ul>
  </li>
  <li><strong>Sort</strong>
    <ul>
      <li>Input: Series of (key,value) pairs</li>
      <li>Output: Sorted <code class="highlighter-rouge">&lt;value&gt;s</code></li>
      <li>Map: <code class="highlighter-rouge">&lt;key,value&gt;</code> -&gt; <code class="highlighter-rouge">&lt;value,_&gt;</code>
        <ul>
          <li>output is sorted (e.g., quick sort)</li>
          <li>sort part of the whole file
            <ul>
              <li>{ {1,10,30,49,88}, {2,5,9,66,87}, ‚Ä¶ }</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Reducer: <code class="highlighter-rouge">&lt;key,value&gt;</code> -&gt; <code class="highlighter-rouge">&lt;key,value&gt;</code>
        <ul>
          <li>combile all sorted sub array using merge sort</li>
          <li>Partition function - partition keys accross reducers based on ranges(1001-2000-&gt;reducer #1, 2001-3000 -&gt; reducer #2)
            <ul>
              <li>Take data distribution into account to balance reducer tasks</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="mapreduce-scheduling">MapReduce Scheduling</h3>

<ul>
  <li><strong>For User</strong>
    <ol>
      <li>Write a Map program(short), write a Reduce program(short)</li>
      <li>Submit job: wait for the result</li>
      <li>Need to know nothing about distributed programming</li>
    </ol>
  </li>
  <li><strong>For System(Hadoop)</strong>
    <ol>
      <li>Parallelize Map</li>
      <li>Transfer data from Map to Reduce</li>
      <li>Parallelize Reduce</li>
      <li>Implement Storage for Map input, Map output, Reduce input,and Reduce output.</li>
    </ol>

    <blockquote>
      <p>Ensure that no Reduce starts before all Maps are finished. That is, ensure the barrier between the Map phase and Reduce phase.</p>
    </blockquote>
  </li>
</ul>

<h3 id="resource">Resource</h3>

<ul>
  <li><a href="https://www.coursera.org/learn/cloud-computing">Cloud Computing</a></li>
</ul>
:ET