I"u5<h3 id="printing">Printing</h3>

<ul>
  <li>链接字符串</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="o">=</span><span class="s">"abc"</span>
<span class="n">b</span><span class="o">=</span><span class="s">"123"</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>使用<code class="highlighter-rouge">,</code>输出空格</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Hens"</span><span class="p">,</span> <span class="mi">25</span><span class="o">+</span><span class="mi">30</span><span class="o">/</span><span class="mi">6</span><span class="p">);</span> <span class="c1">#Hens 30
</span><span class="k">print</span><span class="p">(</span><span class="s">"Hens"</span><span class="p">,</span> <span class="s">"Kay"</span><span class="p">,</span> <span class="s">"Thomas"</span><span class="p">);</span> <span class="c1">#Hens Kay Thomas
</span><span class="k">print</span><span class="p">(</span><span class="s">"Is it greater or equal?"</span><span class="p">,</span> <span class="mi">5</span> <span class="o">&gt;=</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#Is it greater or equal? True
</span></code></pre></div></div>
<ul>
  <li>格式化字符串
    <ul>
      <li>使用format</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">age_eval</span> <span class="o">=</span> <span class="s">"my age is {}"</span>
  <span class="k">print</span><span class="p">(</span><span class="n">age_eval</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">age</span><span class="p">))</span> <span class="c1">#my age is 33
</span>  <span class="k">print</span><span class="p">(</span><span class="s">"This is a string {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="s">'INSERTED'</span><span class="p">))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"The {} {} {} "</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"The {0} {0} {0}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="mf">20.3</span><span class="p">,</span><span class="mi">100</span><span class="p">))</span> <span class="c1">#The 20.3 20.3 20.3
</span>  <span class="k">print</span><span class="p">(</span><span class="s">"The {q} {b} {f}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">f</span><span class="o">=</span><span class="s">'fox'</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="s">'brown'</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="s">'quick'</span><span class="p">))</span> <span class="c1">#The quick brown fox
</span>  <span class="c1">#格式化浮点数:{value:width.precision f}
</span>  <span class="n">result</span> <span class="o">=</span> <span class="mi">100</span><span class="o">/</span><span class="mi">777</span> <span class="c1">#0.1287001287001287
</span>  <span class="k">print</span><span class="p">(</span><span class="s">"result is {r:1.3f}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">r</span><span class="o">=</span><span class="n">result</span><span class="p">))</span> <span class="c1">#result is 0.129
</span>
</code></pre></div>    </div>
    <ul>
      <li>使用<code class="highlighter-rouge">f-string</code></li>
    </ul>

    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">name</span><span class="o">=</span><span class="s">"tao"</span>
  <span class="n">age</span> <span class="o">=</span> <span class="mi">33</span><span class="p">;</span>
  <span class="c1">#使用fstring
</span>  <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">"{name} is {age} years old "</span><span class="p">)</span> <span class="c1">#my name is tao
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="primary-types">Primary Types</h3>

<ul>
  <li><code class="highlighter-rouge">locals()/globals()</code></li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#查看全局变量
</span><span class="k">print</span><span class="p">(</span><span class="nb">globals</span><span class="p">())</span>
<span class="c1">#{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;}
</span>
<span class="k">def</span> <span class="nf">func</span><span class="p">:</span>
    <span class="n">a</span> <span class="o">=</span> <span class="s">'some text'</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">100</span>
    <span class="c1">#查看函数内的局部变量
</span>    <span class="k">print</span><span class="p">(</span><span class="nb">locals</span><span class="p">())</span> <span class="c1">#{'b': 1, 'a': 's'}
</span></code></pre></div></div>
<h3 id="numbers">Numbers</h3>

<ul>
  <li>进制转换
    <ul>
      <li>十六进制：<code class="highlighter-rouge">hex(12)</code></li>
      <li>二进制：<code class="highlighter-rouge">bin(1234)</code></li>
    </ul>
  </li>
  <li>内置数值运算
    <ul>
      <li>次方:<code class="highlighter-rouge">pow(2,4)</code>等价<code class="highlighter-rouge">2**4</code></li>
      <li>绝对值: <code class="highlighter-rouge">abs(-2)</code></li>
      <li>四舍五入：<code class="highlighter-rouge">round(3.9) #4.0</code></li>
    </ul>
  </li>
</ul>

<h3 id="字符串">字符串</h3>

<ul>
  <li>表示方式
    <ul>
      <li><code class="highlighter-rouge">s1 = 'string'</code></li>
      <li><code class="highlighter-rouge">s2 = "string"</code></li>
      <li><code class="highlighter-rouge">s3 = """string"""</code></li>
      <li>三者等价 <code class="highlighter-rouge">s1 == s2 == s3 #True</code></li>
    </ul>
  </li>
  <li>
    <p>支持<code class="highlighter-rouge">[]</code>索引</p>

    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">a</span> <span class="o">=</span> <span class="s">"hello"</span><span class="p">;</span>
  <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">#h
</span>  <span class="n">a</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1">#o
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>字符串常量是Immutable,不能用<code class="highlighter-rouge">[]</code>的方式改变字符串内容</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">s</span> <span class="o">=</span> <span class="s">'hello'</span>
  <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">'H'</span> <span class="c1">#TypeError: 'str' object does not support item assignment
</span>
  <span class="n">s</span> <span class="o">=</span> <span class="s">'H'</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
  <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'h'</span><span class="p">,</span> <span class="s">'H'</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>格式化字符串
    <ul>
      <li>
        <p>使用<code class="highlighter-rouge">fstring</code></p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">binary</span> <span class="o">=</span> <span class="s">"binary"</span>
  <span class="n">do_not</span> <span class="o">=</span> <span class="s">"don't"</span>
  <span class="n">y</span> <span class="o">=</span> <span class="n">f</span><span class="s">"Those who know {binary} and those who {do_not}."</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>使用format</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">id</span> <span class="o">=</span> <span class="mi">100</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">'kate'</span>
  <span class="n">ss</span> <span class="o">=</span> <span class="s">'no data available for person with id: {}, name: {}'</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>获取字串
    <ul>
      <li>使用<code class="highlighter-rouge">[]</code>索引,格式为<code class="highlighter-rouge">[起始index:结束index:步长]</code></li>
      <li>左开右闭区间，类似C++中的迭代器</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">a</span><span class="o">=</span><span class="s">"hello"</span>
  <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="c1">#ello, 包括第一个字符
</span>  <span class="n">a</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span> <span class="c1">#hel, 不包括第三个字符
</span>  <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span> <span class="c1">#el
</span>  <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1">#ell，负数表示从后向前，-1表示倒数第1个字符l，因此区间为[1:4)
</span>  <span class="n">a</span><span class="p">[:]</span> <span class="c1">#hello
</span>  <span class="n">a</span><span class="p">[::]</span> <span class="c1">#hello
</span>  <span class="n">a</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span> <span class="c1">#hlo 步长是2，抽取字串
</span>  <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="c1">#el,起始1，终点-1，步长2
</span>  <span class="n">a</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="c1">#olleh, 反转字符串
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>分割字符串</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">s</span> <span class="o">=</span> <span class="s">'hello'</span>
  <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'e'</span><span class="p">)</span> <span class="c1">#['h','llo']
</span>  <span class="n">s</span><span class="o">.</span><span class="n">partition</span><span class="p">(</span><span class="s">'l'</span><span class="p">)</span> <span class="c1">#('he', 'l', 'lo')
</span></code></pre></div>    </div>
  </li>
  <li>其它API
    <ul>
      <li>首字母大写: <code class="highlighter-rouge">s.capitalize</code></li>
      <li>大小写转换: <code class="highlighter-rouge">s.lower()</code>,<code class="highlighter-rouge">s.upper()</code></li>
      <li>字符出现次数:<code class="highlighter-rouge">s.count('o')</code></li>
      <li>字符出现位置: <code class="highlighter-rouge">s.find('o')</code></li>
      <li>检查字符是否是数字或字母: <code class="highlighter-rouge">s.isalum()</code></li>
      <li>检查字符是否是字母:<code class="highlighter-rouge">s.isalpha()</code></li>
      <li>开头结尾：<code class="highlighter-rouge">s.startswith(str)</code>/<code class="highlighter-rouge">s.endswith(str)</code></li>
    </ul>
  </li>
  <li>
    <p>转义字符</p>

    <table>
      <thead>
        <tr>
          <th>Escape</th>
          <th>What it does.</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code class="highlighter-rouge">\\</code></td>
          <td>Backslash (<code class="highlighter-rouge">\</code>)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\'</code></td>
          <td>Single-quote (<code class="highlighter-rouge">’</code>)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\"</code></td>
          <td>Double-quote (<code class="highlighter-rouge">”</code>)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\a</code></td>
          <td>ASCII bell (BEL)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\b</code></td>
          <td>ASCII backspace (BS)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\f</code></td>
          <td>ASCII formfeed (FF)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\n</code></td>
          <td>ASCII linefeed (LF)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\N</code></td>
          <td>{name} Character named name in the Unicode database (Unicode only)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\r</code></td>
          <td>Carriage Return (CR)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\t</code></td>
          <td>Horizontal Tab (TAB)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\uxxxx</code></td>
          <td>Character with 16-bit hex value <code class="highlighter-rouge">xxxx</code></td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\Uxxxxxxxx</code></td>
          <td>Character with 32-bit hex value <code class="highlighter-rouge">xxxxxxxx</code></td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\v</code></td>
          <td>ASCII vertical tab (VT)</td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\ooo</code></td>
          <td>Character with octal value <code class="highlighter-rouge">ooo</code></td>
        </tr>
        <tr>
          <td><code class="highlighter-rouge">\xhh</code></td>
          <td>Character with hex value <code class="highlighter-rouge">hh</code></td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="basic-statements">Basic Statements</h3>

<ul>
  <li><strong>And,Or,Not</strong></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span><span class="o">&lt;</span><span class="mi">2</span> <span class="ow">and</span> <span class="mi">2</span><span class="o">&lt;</span><span class="mi">3</span>
<span class="mi">2</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">&gt;</span><span class="mi">10</span> <span class="c1">#false, 等价于2&lt;3 and 3&gt;10
</span><span class="mi">100</span><span class="o">==</span><span class="mi">1</span> <span class="ow">or</span> <span class="mi">2</span><span class="o">==</span><span class="mi">2</span>
<span class="ow">not</span> <span class="mi">1</span><span class="o">==</span><span class="mi">1</span>
</code></pre></div></div>
<ul>
  <li><code class="highlighter-rouge">if-elif-else</code></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if some_condition: #注意冒号
    #execute some code 
elif some_other_condition:
    #do something different
else:
    # do something else

#三元运算
condition_is_true if condition else condition_is_false
</code></pre></div></div>

<ul>
  <li>
    <p><code class="highlighter-rouge">for</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
  <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span> <span class="c1">#注意冒号
</span>      <span class="k">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

  <span class="c1">#只关注循环次数
</span>  <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="s">'cool'</span><span class="p">)</span>

  <span class="c1">#遍历tuple list
</span>  <span class="n">mylist</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">),(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)]</span>
  <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">mylist</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="c1">#(1,2) (3,4)
</span>  <span class="k">for</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="ow">in</span> <span class="n">mylist</span><span class="p">:</span> <span class="c1">#使用pattern matching
</span>      <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="c1">#1 3
</span>      <span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1">#2 4
</span>
  <span class="c1">#遍历map list
</span>  <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">'k1'</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s">'k3'</span><span class="p">:</span><span class="mi">3</span><span class="p">}</span>
  <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="c1">#k1,k2,k3  #只返回key
</span>
  <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">():</span> <span class="c1">#返回key-value
</span>      <span class="k">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="c1">#('k1',1),('k2',2),('k3',3)
</span>
  <span class="k">for</span> <span class="n">key</span><span class="p">,</span><span class="n">value</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">():</span> <span class="c1">#使用pattern matching
</span>      <span class="k">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">while</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span> 
  <span class="k">while</span> <span class="n">x</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">'value of x is {x}'</span><span class="p">)</span>
      <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="k">else</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="s">'loop end'</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li><code class="highlighter-rouge">break/continue/pass</code>
    <ul>
      <li><code class="highlighter-rouge">break</code>: Breaks out of the current closest enclosing loop.</li>
      <li><code class="highlighter-rouge">continue</code>: Goes to the top of the closest loop.</li>
      <li><code class="highlighter-rouge">pass</code>: Does nothing at all.</li>
    </ul>
  </li>
  <li>
    <p><code class="highlighter-rouge">range</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="c1">#打印3到9（不包括10），步长为2的数
</span>  <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span> <span class="c1">#产生0-10的偶数
</span></code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">enumerate</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">word</span> <span class="o">=</span> <span class="s">'adc'</span>
  <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">word</span><span class="p">):</span> <span class="c1">#返回一组tuple
</span>      <span class="k">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="c1">#(0,'a')(1,'b')(2,'c')
</span>
  <span class="k">for</span> <span class="n">index</span><span class="p">,</span><span class="n">letter</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
      <span class="k">print</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">zip</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
  <span class="n">list2</span> <span class="o">=</span> <span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">]</span>

  <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">list1</span><span class="p">,</span> <span class="n">list2</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="c1">#(1,'a'),(2,'b'),(3,'c')
</span>
  <span class="n">list3</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">list1</span><span class="p">,</span><span class="n">list2</span><span class="p">))</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">in</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="mi">2</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="c1">#True
</span>  <span class="s">'a'</span> <span class="ow">in</span> <span class="s">'world'</span> <span class="c1">#True
</span>  <span class="s">'mykey'</span> <span class="ow">in</span> <span class="p">{</span><span class="s">'mykey'</span><span class="p">:</span><span class="mi">345</span><span class="p">}</span> <span class="c1">#True
</span>  <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">'mykey'</span><span class="p">:</span><span class="mi">345</span><span class="p">}</span>
  <span class="mi">345</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">values</span><span class="p">()</span> <span class="c1">#True
</span></code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">import</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">shuffle</span> <span class="c1">#从random库中引用shuffle函数
</span>  <span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
  <span class="n">shuffle</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">input</code></p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">result</span> <span class="nb">input</span><span class="p">(</span><span class="s">'what is your name?'</span><span class="p">)</span> <span class="c1">#从键盘接受输入到result，类型是string
</span>  <span class="nb">type</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="c1">#str
</span>  <span class="nb">int</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
  <span class="nb">float</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="数组">数组</h3>

<ul>
  <li>创建list</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mylist</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s">'three'</span><span class="p">]</span>
<span class="n">mylist</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c1">#three
</span><span class="nb">len</span><span class="p">(</span><span class="n">mylist</span><span class="p">)</span> <span class="c1">#长度
</span><span class="n">mylist</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">mylist</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#1
</span></code></pre></div></div>
<ul>
  <li>追加元素</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list1</span><span class="o">=</span><span class="p">[</span><span class="s">'one'</span><span class="p">,</span><span class="s">'two'</span><span class="p">]</span>
<span class="n">list1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">'three'</span><span class="p">)</span> <span class="c1">#['one', 'two', 'three']
</span><span class="n">list1</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span> <span class="c1">#['one', 'two', 'three', [1, 2]]
</span><span class="n">list1</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="s">'str'</span><span class="p">)</span> <span class="c1">#['one', 'two', 'str', 'three',[1, 2]]
</span></code></pre></div></div>
<ul>
  <li>删除元素</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">val</span> <span class="o">=</span> <span class="nb">list</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="c1">#默认删除尾部
</span><span class="n">val</span> <span class="o">=</span> <span class="nb">list</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="c1">#删除尾部
</span><span class="n">val</span> <span class="o">=</span> <span class="nb">list</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># 删除index=2的元素
</span><span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="n">list1</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#删除数组中第一个2
</span></code></pre></div></div>
<ul>
  <li>拼接list</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list1</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">list2</span><span class="o">=</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="n">list3</span> <span class="o">=</span> <span class="n">list1</span> <span class="o">+</span> <span class="n">list2</span> <span class="c1">#[1, 2, 3, 4, 5]
</span><span class="n">list1</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">list2</span><span class="p">)</span> <span class="c1">#等价于list1 = list1+list2
</span></code></pre></div></div>
<ul>
  <li>其它API</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list1</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">max_num</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
<span class="n">min_num</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
<span class="n">list1</span><span class="o">.</span><span class="n">revers</span><span class="p">()</span>
<span class="n">list1</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</code></pre></div></div>
<ul>
  <li>functional API</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mylist1</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="s">'abc'</span><span class="p">]</span> <span class="c1"># ['a',b,'c']
</span><span class="n">mylist2</span> <span class="o">=</span> <span class="p">[</span><span class="n">num</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">11</span><span class="p">)]</span> <span class="c1">#[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</span><span class="n">mylist3</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">11</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="p">]</span><span class="c1">#[1, 3, 5, 7, 9]
</span><span class="n">mylist4</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="s">'ODD'</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">11</span><span class="p">)]</span> <span class="c1">#[0, 'ODD', 2, 'ODD', 4, 'ODD', 6, 'ODD', 8, 'ODD', 10]
</span><span class="n">mylist5</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">100</span><span class="p">]]</span> <span class="c1">#[2, 20, 200, 4, 40, 400, 6, 60, 600]
</span>
<span class="c1">##返回一个参数为偶数的数组
</span><span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">args</span> <span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="tuples">Tuples</h3>

<ul>
  <li>Immutable，不能修改tuple中的元素</li>
  <li>Tuple uses parenthesis: <code class="highlighter-rouge">(1,2,3)</code></li>
  <li>Only two methods
    <ul>
      <li><code class="highlighter-rouge">index</code></li>
      <li><code class="highlighter-rouge">count</code></li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="nb">type</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="c1">#tuple
</span><span class="n">t</span><span class="o">=</span><span class="p">(</span><span class="s">'one'</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">#one
</span><span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="mi">2</span> <span class="c1">#2
</span><span class="n">t</span><span class="o">=</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span><span class="s">'a'</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="n">t</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s">'a'</span><span class="p">)</span> <span class="c1">#2
</span><span class="n">t</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s">'a'</span><span class="p">)</span> <span class="c1">#0
</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s">'NEW'</span> <span class="c1">#TypeError
</span></code></pre></div></div>

<h3 id="字典dict">字典(dict)</h3>

<ul>
  <li>创建方式</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d1</span> <span class="o">=</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'jason'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'male'</span><span class="p">}</span>
<span class="n">d2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">({</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'jason'</span><span class="p">,</span> <span class="s">'age'</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s">'gender'</span><span class="p">:</span> <span class="s">'male'</span><span class="p">})</span>
<span class="n">d3</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">([(</span><span class="s">'name'</span><span class="p">,</span> <span class="s">'jason'</span><span class="p">),</span> <span class="p">(</span><span class="s">'age'</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span> <span class="p">(</span><span class="s">'gender'</span><span class="p">,</span> <span class="s">'male'</span><span class="p">)])</span>
<span class="n">d4</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'jason'</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">gender</span><span class="o">=</span><span class="s">'male'</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>无序字典</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span><span class="o">=</span><span class="p">{</span><span class="s">'k1'</span><span class="p">:</span><span class="mi">123</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="s">'k3'</span><span class="p">:{</span><span class="s">'insidekey'</span><span class="p">:</span><span class="mi">100</span><span class="p">}}</span>
<span class="n">d</span><span class="p">[</span><span class="s">'k2'</span><span class="p">]</span> <span class="c1">#[0,1,2]
</span><span class="n">d</span><span class="p">[</span><span class="s">'k4'</span><span class="p">]</span><span class="o">=</span><span class="s">"abc"</span>
<span class="n">keys</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span> 
</code></pre></div></div>
<p><mark>Python 3.7后字典变成有序字典</mark></p>

<ul>
  <li>访问
    <ul>
      <li>使用<code class="highlighter-rouge">[]</code>访问，如果key不存在则抛异常</li>
      <li>使用<code class="highlighter-rouge">get('key')</code>访问，如果key不存在则返回默认值</li>
    </ul>
  </li>
  <li>删除
    <ul>
      <li><code class="highlighter-rouge">d.pop('key')</code></li>
    </ul>
  </li>
  <li>函数式API</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#{key:value | 规则}
</span><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)}</span><span class="c1">#{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}
#{key:value | zip(k,v)}
</span><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span><span class="n">v</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">([</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">],</span><span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">))}</span> <span class="c1">#{'a': 0, 'b': 1}
</span></code></pre></div></div>

<ul>
  <li>按key/vlaue排序</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">'b'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'a'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'c'</span><span class="p">:</span> <span class="mi">10</span><span class="p">}</span>
<span class="n">d_sorted_by_key</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1"># 根据字典键的升序排序
</span><span class="n">d_sorted_by_value</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="c1"># 根据字典值的升序排序
</span><span class="n">d_sorted_by_key</span> <span class="c1">#[('a', 2), ('b', 1), ('c', 10)]
</span><span class="n">d_sorted_by_value</span> <span class="c1">#[('b', 1), ('a', 2), ('c', 10)]
</span></code></pre></div></div>

<h3 id="集合set">集合(set)</h3>

<ul>
  <li>无序哈希表，无法索引</li>
  <li>创建</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
<span class="n">s2</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</code></pre></div></div>

<ul>
  <li>添加元素</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s1</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">s1</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>删除元素</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s2</span><span class="o">.</span><span class="n">discard</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">s2</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">s2</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span> 
</code></pre></div></div>

<ul>
  <li>检查元素存在</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b1</span> <span class="o">=</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">s1</span> <span class="c1">#true
</span><span class="n">b2</span> <span class="o">=</span> <span class="mi">10</span> <span class="ow">in</span> <span class="n">s2</span> <span class="c1">#false
</span></code></pre></div></div>

<ul>
  <li>逻辑操作</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#求差集
</span><span class="n">s1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
<span class="n">s2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">}</span>
<span class="n">s2</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span> <span class="c1">#{2, 3, 4, 5}
</span><span class="n">s2</span><span class="o">.</span><span class="n">difference_update</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span> <span class="c1">#s2更新为二者差集{2, 3, 4, 5}
</span>
<span class="c1">#求交集
</span><span class="n">s1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
<span class="n">s2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">}</span>
<span class="n">s1</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">s2</span><span class="p">)</span> <span class="c1">#{1,2}
</span><span class="n">s3</span> <span class="o">=</span> <span class="p">{</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">}</span>
<span class="n">s1</span><span class="o">.</span><span class="n">disjoint</span><span class="p">(</span><span class="n">s3</span><span class="p">)</span> <span class="c1">#无交集返回True，有交集返回False
</span>
<span class="c1">#父集子集
</span><span class="n">s1</span><span class="o">.</span><span class="n">issubset</span><span class="p">(</span><span class="n">s2</span><span class="p">)</span>
<span class="n">s1</span><span class="o">.</span><span class="n">issupperset</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>

<span class="c1">#求并集
</span><span class="n">s1</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">s2</span><span class="p">)</span>
<span class="n">s1</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">s2</span><span class="p">)</span> <span class="c1">#将s1更新为s1,s2的并集
</span></code></pre></div></div>

<ul>
  <li>排序</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">}</span>
<span class="nb">sorted</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c1"># 对集合的元素进行升序排序，返回一个array
#[1, 2, 3, 4]
</span></code></pre></div></div>

<h3 id="文件操作">文件操作</h3>

<ul>
  <li>mode
    <ul>
      <li><code class="highlighter-rouge">r</code>: read</li>
      <li><code class="highlighter-rouge">w</code>: write</li>
      <li><code class="highlighter-rouge">r+</code></li>
      <li><code class="highlighter-rouge">w+</code></li>
      <li><code class="highlighter-rouge">a</code> : append</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">myfile</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="s">"./test.txt"</span><span class="p">,</span><span class="n">mode</span><span class="o">=</span><span class="s">'r'</span><span class="p">)</span> <span class="c1">#_io.TextIOWrapper
</span>  <span class="n">content</span> <span class="o">=</span> <span class="n">myfile</span><span class="o">.</span><span class="n">read</span><span class="p">()</span> <span class="c1">#string
</span>  <span class="n">myfile</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#move file cursor to front
</span>  <span class="n">myfile</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span> <span class="c1">#list
</span>  <span class="n">myfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
  <span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'TEXT.txt'</span><span class="p">,</span><span class="n">mode</span><span class="o">=</span><span class="s">'w'</span><span class="p">)</span>
  <span class="nb">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">'THis is a test file!'</span><span class="p">)</span>
  <span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>使用<code class="highlighter-rouge">with</code>操作</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"welcome.txt"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span> <span class="c1"># Use file to refer to the file object
</span>      <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
      <span class="c1">#do something with data
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="lambda-expressions">Lambda Expressions</h3>

<ul>
  <li><code class="highlighter-rouge">map/filter</code>: 第一个参数是函数对象，第二个参数是数组</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">num</span><span class="o">*</span><span class="n">num</span>
<span class="k">def</span> <span class="nf">check_even</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">num</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>

<span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">list2</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">square</span><span class="p">,</span><span class="n">list1</span><span class="p">)</span>
<span class="n">list3</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="n">check_even</span><span class="p">,</span><span class="n">list1</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><code class="highlighter-rouge">lamda expression</code></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">square</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="p">:</span> <span class="n">num</span><span class="o">**</span><span class="mi">2</span><span class="p">;</span>
<span class="n">square</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="n">mynums</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">num</span><span class="p">:</span><span class="n">num</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span><span class="n">mynums</span><span class="p">))</span>

</code></pre></div></div>

<h3 id="decorators">Decorators</h3>

<ul>
  <li>在不修改原函数的前提下，对已有函数进行扩展后，返回一个新的函数给原函数</li>
  <li>在需要扩展的函数上面，使用<code class="highlighter-rouge">@</code>符号标记</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">some_decorator</span><span class="p">(</span><span class="n">some_func</span><span class="p">)</span>    
    <span class="k">def</span> <span class="nf">wrap_func</span><span class="p">()</span>
        <span class="c1">#some code
</span>        <span class="n">some_func</span><span class="p">()</span>
        <span class="c1">#some code 
</span>    <span class="k">return</span> <span class="n">wrap_func</span>            
    
<span class="o">@</span><span class="n">some_decorator</span> 
<span class="k">def</span> <span class="nf">simple_func</span><span class="p">():</span>
    <span class="c1">#DO something
</span>    <span class="k">return</span> <span class="n">something</span>
</code></pre></div></div>
<p>通过<code class="highlighter-rouge">@</code>修饰，将<code class="highlighter-rouge">simple_func</code>传递给<code class="highlighter-rouge">some_decorator</code>函数，<code class="highlighter-rouge">some_decorator</code>将<code class="highlighter-rouge">wrap_func</code>返回给<code class="highlighter-rouge">simple_func</code>，这样在后面调用<code class="highlighter-rouge">simple_func</code>时就相当于调用了<code class="highlighter-rouge">wrap_func()</code></p>

<ul>
  <li>Decorator的实现</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">new_decorator</span><span class="p">(</span><span class="n">orig_func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrap_func</span><span class="p">():</span>
        <span class="c1">#some code before execute  orig_func
</span>        <span class="k">print</span><span class="p">(</span><span class="s">'before orig_func'</span><span class="p">)</span>
        <span class="n">orig_func</span><span class="p">()</span>
        <span class="c1">#some code after execute orig_func
</span>        <span class="k">print</span><span class="p">(</span><span class="s">'after orig_func'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrap_func</span>

<span class="k">def</span> <span class="nf">fun_needs_decorator</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"fun needs decorator"</span><span class="p">)</span>

<span class="n">fun_needs_decorator</span> <span class="o">=</span> <span class="n">new_decorator</span><span class="p">(</span><span class="n">fun_needs_decorator</span><span class="p">)</span>
<span class="n">fun_needs_decorator</span><span class="p">()</span>

<span class="c1">#使用 @符号
</span><span class="o">@</span><span class="n">new_decorator</span>
<span class="k">def</span> <span class="nf">fun_needs_decorator</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"fun needs decorator"</span><span class="p">)</span>

<span class="n">fun_needs_decorator</span><span class="p">()</span><span class="c1">#得到相同结果
</span></code></pre></div></div>
<ul>
  <li>Decorator可以嵌套使用</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">my_decorator1</span>
<span class="o">@</span><span class="n">my_decorator2</span>
<span class="k">def</span> <span class="nf">func2</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="oop">OOP</h3>

<ul>
  <li><code class="highlighter-rouge">class</code>，成员变量，成员函数</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">NameOfClass</span><span class="p">():</span> <span class="c1">#注意括号和冒号
</span>    <span class="n">instance_variable</span> <span class="o">=</span> <span class="n">some_value</span> <span class="c1">#共有成员
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">param1</span><span class="p">,</span> <span class="n">param2</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">param1</span> <span class="o">=</span> <span class="n">param1</span> <span class="c1">#定义私有成员
</span>        <span class="bp">self</span><span class="o">.</span><span class="n">param2</span> <span class="o">=</span> <span class="n">param2</span>
    <span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1">#成员函数
</span>        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">param1</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dog</span><span class="p">():</span>
    <span class="n">species</span><span class="o">=</span><span class="s">"mammal"</span> <span class="c1">#定义共有成员变量
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">breed</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">breed</span> <span class="c1">#定义私有成员变量
</span>    <span class="k">def</span> <span class="nf">bark</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1">#定义成员函数
</span>        <span class="k">print</span><span class="p">(</span><span class="s">"WOOF"</span><span class="p">)</span> 

<span class="n">my_dog</span> <span class="o">=</span> <span class="n">Dog</span><span class="p">(</span><span class="n">breed</span><span class="o">=</span><span class="s">'Lab'</span><span class="p">)</span>
<span class="nb">type</span><span class="p">(</span><span class="n">my_dog</span><span class="p">)</span>  <span class="c1">#&lt;class '__main__.Dog'&gt;
</span><span class="k">print</span><span class="p">(</span><span class="n">my_dog</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">my_dog</span><span class="o">.</span><span class="n">species</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>继承</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Animal</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Animal created"</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">who_am_i</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"I am an animal"</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">eat</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"I am eating"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dog</span><span class="p">(</span><span class="n">Animal</span><span class="p">):</span> <span class="c1">#继承
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">Animal</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="c1">#调用父类构造
</span>        <span class="k">print</span><span class="p">(</span><span class="s">"Dog Created"</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">who_am_i</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1">#override
</span>        <span class="k">print</span><span class="p">(</span><span class="s">"I am a dog"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>抽象类</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Animal</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nb">NotImplementedError</span><span class="p">(</span><span class="s">"Subclass must implement this abstract method"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dog</span><span class="p">(</span><span class="n">Animal</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">speak</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s">"say WOOF!"</span>
</code></pre></div></div>

<ul>
  <li>特殊API</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Book</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">title</span><span class="p">,</span><span class="n">author</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="n">author</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pages</span> <span class="o">=</span> <span class="mi">100</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1">#自定义类描述
</span>        <span class="k">return</span> <span class="n">f</span><span class="s">"{self.title} by {self.author}"</span>
    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1">#len()使用
</span>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">pages</span>
    <span class="k">def</span> <span class="nf">__del__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"A book object has been deleted"</span><span class="p">)</span>

<span class="n">b</span> <span class="o">=</span> <span class="n">Book</span><span class="p">(</span><span class="s">'Python3'</span><span class="p">,</span><span class="s">'Jose'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1">#Python3 by Jose
</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1">#100
</span><span class="k">del</span> <span class="n">b</span> <span class="c1">#A book object has been deleted
</span></code></pre></div></div>

<h3 id="modules-and-packages">Modules and Packages</h3>

<ul>
  <li>文件引用</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### mymodule.py
</span><span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"from my_module"</span><span class="p">)</span>

<span class="c1">### other files
</span><span class="kn">from</span> <span class="nn">mymodule</span> <span class="kn">import</span> <span class="n">my_func</span>
<span class="n">my_func</span><span class="p">()</span>
</code></pre></div></div>
<ul>
  <li>文件夹(package)引用</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└── package
├── __init__.py
├── main_script.py
└── subpackage
    ├── __init__.py
    └── sub_script.py
</code></pre></div></div>
<p>假设包结构如上，Python3中不再需要<code class="highlighter-rouge">__init__.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">package</span> <span class="kn">import</span> <span class="n">main_script</span> <span class="c1">#引用包内文件
</span><span class="kn">from</span> <span class="nn">package.subpackage</span> <span class="kn">import</span> <span class="n">sub_script</span> <span class="c1">#引用包内文件
</span>
<span class="n">main_script</span><span class="o">.</span><span class="n">func_from_mainsript</span><span class="p">()</span> <span class="c1">#调用main_script的方法
</span><span class="n">sub_script</span><span class="o">.</span><span class="n">func_from_subsript</span><span class="p">()</span> <span class="c1">#调用sub_script的方法
</span></code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">__main__</code></li>
</ul>

<p>python没有<code class="highlighter-rouge">main</code>函数，当执行<code class="highlighter-rouge">python xx.py</code>时，在<code class="highlighter-rouge">xx.py</code>内有一个全局变量<code class="highlighter-rouge">__name__</code>被赋值为<code class="highlighter-rouge">"__main__"</code>表示这个文件是被直接运行的文件，也就是相当于<code class="highlighter-rouge">main</code>函数所在的文件。在程序里可以做如下判断:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">__name</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="c1">#当被直接运行时，需要执行的代码
</span>    <span class="n">some_func</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="errors-and-exception">Errors and Exception</h3>

<ul>
  <li>Three keywords
    <ul>
      <li><code class="highlighter-rouge">try</code>: block of code might lead to an error</li>
      <li><code class="highlighter-rouge">except</code>:block of code will be executed in case there is an error in <code class="highlighter-rouge">try</code> block</li>
      <li><code class="highlighter-rouge">finally</code>: A final block of code to be executed, regardless of an error</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ask_for_int</span><span class="p">():</span>
    <span class="k">while</span> <span class="n">true</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Please provide number: "</span><span class="p">))</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Whoops! this is not a number!)</span><span class="err">
</span><span class="s">            continue</span><span class="err">
</span><span class="s">        else:</span><span class="err">
</span><span class="s">            print(result)</span><span class="err">
</span><span class="s">            break</span><span class="err">
</span><span class="s">        finally:</span><span class="err">
</span><span class="s">            print("</span><span class="n">END</span><span class="s">")</span><span class="err">
</span></code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">except</code>可以捕获具体的错误类型</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'testfile'</span><span class="p">,</span><span class="s">'w'</span><span class="p">)</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">"Write a test line"</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">TypeError</span><span class="p">:</span> <span class="c1">#捕获具体错误类型
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"There was a type error!"</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">OSError</span><span class="p">:</span> <span class="c1">#捕获具体错误类型
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"You have an OS Error"</span><span class="p">)</span>
<span class="k">finally</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"End)</span><span class="err">

</span></code></pre></div></div>

<h3 id="unit-test">Unit Test</h3>

<ul>
  <li><code class="highlighter-rouge">pylint</code>: 静态语法检查
    <ul>
      <li><code class="highlighter-rouge">pip install pylint</code></li>
      <li><code class="highlighter-rouge">&gt; pylint xx.py</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">unittest</code>: built-in library，自带的单元测试库</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">#cap.py - file to be tested
</span><span class="k">def</span> <span class="nf">cap_text</span><span class="p">(</span><span class="nb">str</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">str</span><span class="o">.</span><span class="n">capitalize</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">title_text</span><span class="p">(</span><span class="nb">str</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">str</span><span class="o">.</span><span class="n">title</span><span class="p">()</span>

<span class="c1">#test.py - Unit test file
</span><span class="kn">import</span> <span class="nn">unitest</span>
<span class="kn">import</span> <span class="nn">cap</span> <span class="c1">#file name
</span>
<span class="k">class</span> <span class="nc">TestCap</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">test_one_word</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="n">text</span> <span class="o">=</span> <span class="s">'python'</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">cap</span><span class="o">.</span><span class="n">cap_text</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="s">'Python'</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">test_multiple_words</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="n">text</span> <span class="o">=</span> <span class="s">'monty python'</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">title_text</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="s">'Monty Python'</span><span class="p">)</span>
    
<span class="k">if</span> <span class="n">__name</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
        <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="resources-for-basic-practice">Resources for basic Practice</h2>
<ul>
  <li><a href="http://book.pythontips.com/en/latest/">Intermediate Python</a></li>
  <li><a href="http://codingbat.com/python">Basic Practice</a></li>
  <li><a href="https://projecteuler.net/archives">More Mathematical (and Harder) Practice</a></li>
  <li><a href="http://www.codeabbey.com/index/task_list">List of Practice Problems</a></li>
  <li><a href="https://www.reddit.com/r/dailyprogrammer">Reddit</a></li>
  <li><a href="http://www.pythonchallenge.com/">PythonChallenge</a></li>
</ul>
:ET