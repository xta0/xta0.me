I"QD<h2 id="线程同步">线程同步</h2>

<p>考虑这样一个场景，假如我们有一个计数器从0开始递增，现在有100个线程并发同时修改计数器的值，怎么保证计数器的值有序递增的输出？</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span>
<span class="n">dispatch_queue_create</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
   <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
            <span class="n">self</span><span class="p">.</span><span class="n">j</span> <span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">j</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>
<p>上述代码中，由于线程是并发的，导致<code class="highlighter-rouge">self.j</code>在执行<code class="highlighter-rouge">printf</code>时，I/O缓冲区中的数据并不是当前最新的，因此输出的<code class="highlighter-rouge">self.j</code>的值是乱序的。这个问题的本质是线程之间的同步问题，block中两句代码的执行存在时间差。如果想要保证输出顺序，我们需要强制每个线程执行完这两行代码后，其它线程才能开始执行，即block中的代码具备原子性。</p>

<p>为了达到这个目的，在iOS中我们有下面几种做法</p>

<ul>
  <li>使用GCD提供的串行队列</li>
</ul>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//修改queue为串行队列</span>
<span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span>
<span class="n">dispatch_queue_create</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_SERIAL</span><span class="p">);</span>
</code></pre></div></div>
<ul>
  <li>使用<code class="highlighter-rouge">@synchronize</code>保护临界区</li>
</ul>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@synchronized</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">self</span><span class="p">.</span><span class="n">j</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">j</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>使用GCD的Barrier</li>
</ul>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dispatch_barrier_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
	<span class="n">self</span><span class="p">.</span><span class="n">j</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">j</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>使用各种锁</li>
</ul>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">guard</span><span class="p">(</span><span class="n">_m</span><span class="p">);</span>
	<span class="n">self</span><span class="p">.</span><span class="n">j</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">j</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="locks">Locks</h2>

<p>常用的锁有下面几种：</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">Mutex locks</code>: 互斥锁是一种信号量，在某个时刻只允许一个线程对资源进行访问，如果互斥锁正在被使用，另一个线程尝试使用，那么这个线程会被block，直到互斥锁被释放。如果多个线程竞争同一个所锁，只有一个线程能获取到。互斥锁对应POSIX中的实现是<code class="highlighter-rouge">pthread_mutex_t</code>，Objective-C中的<code class="highlighter-rouge">@synchronized</code>关键字内部分装了对<code class="highlighter-rouge">pthread_mutex_t</code>的操作</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">Spin locks</code>: 自旋锁的原理是不断check lock条件，直到条件为true。自旋锁经常被用在多核处理器上并且lock时间很短的场合，如果lock时间很长，则会耗尽CPU资源</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">Reader/writer locks</code>: 读写锁，这种锁通常用在”读”多，”写”少的场合。当写操作发生时，该线程会先被block，直到所有”读”操作完成。对应POSIX的实现是<code class="highlighter-rouge">pthread_rwlock_t</code></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">Recursive locks</code>: 递归锁是互斥锁的一个变种，它允许某一个线程在释放锁之前可以多次获取，其它线程只能等待获取它的线程释放，它最初设计被用来做函数的递归调用，但是也可以用在多个方法同时需要获取一个lock的场合</p>
  </li>
</ul>

<h2 id="memory-barrier">Memory Barrier</h2>

<p>为了达到最佳性能，编译器通常会对汇编基本的指令进行重新排序来尽可能保持处理器的指令流水线。作为优化的一部分，编译器有可能对访问主内存的指令，如果它认为这有可能产生不正确的数据时，将会对指令进行重新排序。不幸的是，靠编译器检测到所有可能内存依赖的操作几乎总是不太可能的。如果看似独立的变量实际上是相互影响，那么编译器优化有可能把这些变量更新位错误的顺序，导致潜在的不正确结果。</p>

<p>为了解决这个问题，我们可以使用内存屏障。所谓内存屏障（memory barrier）是一个使用来确保内存操作按照正确的顺序工作的非阻塞的同步工具。<mark>内存屏障的作用就像一个栅栏，迫使处理器来完成位于障碍前面的任何加载和存储操作，才允许它执行位于屏障之后的加载和存储操作</mark>。内存屏障同样可以用来确保一个线程（但对另外一个线程可见）的内存操作总是按照预定的顺序完成。如果在这些地方缺少内存屏障有可能让其他线程看到看似不可能的结果。为了使用一个内存屏障，你只要在你代码里面需要的地方简单的调用<code class="highlighter-rouge">OSMemoryBarrier()</code>函数。<code class="highlighter-rouge">OSMemoryBarrier()</code>定义在<code class="highlighter-rouge">OSAtomic.h</code>中，ReactiveCocoa中,通过<code class="highlighter-rouge">OSMemoryBarrier()</code>保证<code class="highlighter-rouge">_disposeBlock</code>的赋值</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">init</span> <span class="p">{</span>
	<span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nf">init</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>

	<span class="n">_disposeBlock</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">;</span>
	<span class="n">OSMemoryBarrier</span><span class="p">();</span>

	<span class="k">return</span> <span class="n">self</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="volatile">Volatile</h2>

<p><code class="highlighter-rouge">Volatile</code> 变量适用于独立变量的另一个内存限制类型。编译器优化代码通过加载这些变量的值进入寄存器。对于本地变量，这通常不会有什么问题。但是如果一个变量对另外一个线程可见，那么这种优化可能会阻止其他线程发现变量的任何变化。<mark>在变量之前加上关键字volatile可以强制编译器每次使用变量的时候都从内存里面加载</mark>。如果一个变量的值随时可能给编译器无法检测的外部源更改，那么你可以把该变量声明为<code class="highlighter-rouge">volatile</code>变量。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="o">*</span><span class="n">ip</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">*</span><span class="n">ip</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="o">*</span><span class="n">ip</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div></div>
<p>会被编译器优化为:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="o">*</span><span class="n">ip</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">*</span><span class="n">ip</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div></div>

<p>如果使用<code class="highlighter-rouge">volatile</code>修饰，则编译器就不会对<code class="highlighter-rouge">*ip</code>进行优化。多线程中使用<code class="highlighter-rouge">volatile</code>要考虑下面两种情况：</p>

<ol>
  <li>
    <p>在本线程内, 当读取一个变量时，为提高存取速度，编译器有时会先把变量读取到一个寄存器中；以后，再取变量值时，就直接从寄存器中取值；当变量值在本线程里改变时，会同时把变量的新值copy到该寄存器中，以便保持一致。<mark>但是当变量在因别的线程等而改变了值，该寄存器的值不会相应改变，从而造成应用程序读取的值和实际的变量值不一致。</mark></p>
  </li>
  <li>
    <p>当该寄存器在因别的线程等而改变了值，原变量的值不会改变，从而造成应用程序读取的值和实际的变量值不一致。</p>
  </li>
</ol>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">square</span><span class="p">(</span><span class="k">volatile</span> <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span><span class="p">){</span>
	<span class="k">return</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">*</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>该程序的目的是用来返指针<code class="highlighter-rouge">*ptr</code>指向值的平方，但是，由于<code class="highlighter-rouge">*ptr</code>指向一个<code class="highlighter-rouge">volatile</code>型参数，编译器将产生类似下面的代码：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">square</span><span class="p">(</span><span class="k">volatile</span> <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span><span class="p">){</span>
	<span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
	<span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
	<span class="n">b</span> <span class="o">=</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>上述代码中，<code class="highlighter-rouge">a</code>,<code class="highlighter-rouge">b</code>将位于CPU的寄存器内。但是由于<code class="highlighter-rouge">*ptr</code>的值可能被其它线程意想不到地改变，因此<code class="highlighter-rouge">a</code>和<code class="highlighter-rouge">b</code>可能会发生变化。结果，这段代码可能返不是所期望的平方值。正确的代码如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="nf">square</span><span class="p">(</span><span class="k">volatile</span> <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span><span class="p">){</span>
	<span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
	<span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<blockquote>
  <p>频繁地使用volatile很可能会增加代码尺寸和降低性能,因此要合理的使用volatile。</p>
</blockquote>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="http://www.dreamingwish.com/article/the-ios-multithreaded-programming-guide-4-thread-synchronization.html">Synchronization</a></li>
  <li><a href="http://perpendiculo.us/2009/09/synchronized-nslock-pthread-osspinlock-showdown-done-right/">几种锁的性能比较</a></li>
  <li><a href="https://www.mikeash.com/pyblog/friday-qa-2017-10-27-locks-thread-safety-and-swift-2017-edition.html">Friday Q&amp;A 2017-10-27: Locks, Thread Safety, and Swift: 2017 Edition</a></li>
  <li><a href="https://www.mikeash.com/pyblog/friday-qa-2015-05-29-concurrent-memory-deallocation-in-the-objective-c-runtime.html">Friday Q&amp;A 2015-05-29: Concurrent Memory Deallocation in the Objective-C Runtime</a></li>
  <li><a href="https://www.mikeash.com/pyblog/friday-qa-2015-02-20-lets-build-synchronized.html">Friday Q&amp;A 2015-02-20: Let’s Build @synchronized</a></li>
  <li><a href="https://www.mikeash.com/pyblog/friday-qa-2013-08-16-lets-build-dispatch-groups.html">Friday Q&amp;A 2013-08-16: Let’s Build Dispatch Groups</a></li>
  <li><a href="https://www.mikeash.com/pyblog/friday-qa-2013-08-16-lets-build-dispatch-groups.html">Friday Q&amp;A 2013-03-08: Let’s Build NSInvocation, Part I</a></li>
  <li><a href="https://www.mikeash.com/pyblog/friday-qa-2013-03-22-lets-build-nsinvocation-part-ii.html">Friday Q&amp;A 2013-03-08: Let’s Build NSInvocation, Part 2</a></li>
  <li><a href="https://www.mikeash.com/pyblog/friday-qa-2012-11-30-lets-build-a-mach-o-executable.html">Friday Q&amp;A 2012-11-30: Let’s Build A Mach-O Executable</a></li>
  <li><a href="https://www.mikeash.com/pyblog/friday-qa-2012-11-16-lets-build-objc_msgsend.html">Friday Q&amp;A 2012-11-16: Let’s Build objc_msgSend</a></li>
</ul>
:ET