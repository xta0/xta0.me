I"!R<blockquote>
  <p>本文部分图片截取自课程视频<a href="https://www.coursera.org/learn/neural-networks-deep-learning">Nerual Networks and Deep Learning</a></p>
</blockquote>

<h2 id="logistic-regression-recap">Logistic Regression Recap</h2>

<p>前面机器学习的课程中，我们曾<a href="https://xta0.me/2017/09/27/Machine-Learning-3.html">介绍过Logistic Regression的概念</a>，它主要用来解决分类的问题，比如预测结果是True或False的二元分类问题。</p>

<p><img src="/assets/images/2018/01/dp-w2-0.png" class="md-img-center" width="60%" /></p>

<p>上图所示，我们可以将逻辑回归模型理解为只有一个神经元的神经网络，输入数据通过这个神经元后，得到一组分类结果。如果我们将x,y都用矩阵表示，则公式为</p>

<script type="math/tex; mode=display">\hat{y} = \sigma(w^Tx + b)</script>

<p>其中$\hat{y}$, $x$, $w$ 和 $b$ 皆为矩阵，$\sigma$为sigmoid函数，定义为$\sigma(z) = \frac{1}{1+e^{-z}}$。我们假设第$i$组训练样本用向量$x^{(i)}$表示，则$x^{(i)}$是$nx1$的（注意是n行1列），那么假设一共有$m$组训练样本，则样本矩阵$X$表示为</p>

<script type="math/tex; mode=display">% <![CDATA[
X= 
\begin{bmatrix}
. & . & . & . & . & . & . \\
. & . & . & . & . & . & . \\
x^{(1)} & x^{(2)} & x^{(3)} & . & . & . & x^{(m)} \\
. & . & . & . & . & . & . \\
. & . & . & . & . & . & . \\
\end{bmatrix} %]]></script>

<p>类似的$w$是一个<code class="highlighter-rouge">nx1</code>的向量，则$w^Tx$是<code class="highlighter-rouge">1xm</code>的, 对应的常数项$b$也是<code class="highlighter-rouge">1xm</code>的矩阵。对任意第$i$个训练样本，有</p>

<script type="math/tex; mode=display">z^{(i)} = w^Tx^{(i)} + b</script>

<p>对所有训练集则可以使用矩阵运算来表示</p>

<script type="math/tex; mode=display">% <![CDATA[
\begin{bmatrix}
z^{(1)} & z^{(2)} & . & . & . &z^{(m)}  
\end{bmatrix}
= w^{T}X + 
\begin{bmatrix}
b_1 & b_2 & . & . & . &b_n
\end{bmatrix} %]]></script>

<p>对任意训练集$i$，另$a^{(i)} = \sigma(z^{(i)})$，则最后的预测结果$\hat{y}$可以表示为</p>

<script type="math/tex; mode=display">% <![CDATA[
\hat{y} = 
\begin{bmatrix}
a^{(1)} & a^{(2)} & . & . & . &a^{(m)}  
\end{bmatrix} %]]></script>

<p>因此预测结果$\hat{y}$为<code class="highlighter-rouge">1xm</code>的向量</p>

<h3 id="cost-function">Cost function</h3>

<p>对于某一组训练集可知其cross-entropy loss函数为</p>

<script type="math/tex; mode=display">L(\hat(y),y) = - (y\log{\hat{y}}) - (1-y)\log{(1-\hat{y})}</script>

<p>然后我们对所有$m$组训练集都计算Loss函数，之后再求平均，则可以得到Cost function</p>

<script type="math/tex; mode=display">J(w,b) = \frac{1}{m}\sum_{i=1}^{m}L(\hat{y}^{(i)}, y^{(i)}) = -\frac{1}{m}\sum_{i=1}^{m}[(y^{(i)}\log{\hat{y}^{(i)}}) + (1-y^{(i)})\log{(1-\hat{y}^{(i)})} ]</script>

<h2 id="gradient-descent">Gradient Descent</h2>

<p>有了Cost funciton之后，我们就可以使用梯度下降来求解$w$和$b$，使$J(w,b)$最小。梯度下降的计算方式如下</p>

<script type="math/tex; mode=display">w := w - \alpha\frac{dJ(w,b)}{dw} \\
b := b - \alpha\frac{dJ(w,b)}{db}</script>

<p>上述式子通过不断的对$w$和$b$进行求偏导，最终使其收敛为一个稳定的值，其中$\alpha$为Learning Rate,用来控制梯度下降的幅度。在后面的Python代码中，使用<code class="highlighter-rouge">dw</code>表示 $\frac{dJ(w,b)}{dw}$，<code class="highlighter-rouge">db</code>表示$\frac{dJ(w,b)}{db}$，以此类推。</p>

<h3 id="computation-graph">Computation Graph</h3>

<p>虽然我们有了上面的算式，但如何有效的计算它是我们接下来要讨论的问题，这里我们介绍一种使用<strong>Computation Graph</strong>的思路，所谓的Computation Graph的概念，基本思想是将每一步运算都用一个节点表示，然后将这些节点串联起来得到一个Graph，举例来说，假设有一个函数为</p>

<script type="math/tex; mode=display">J(a,b,c) = 3(a+bc)</script>

<p>我们另</p>

<ul>
  <li>$u = bc$</li>
  <li>$v = a+u$</li>
  <li>$J = 3v$</li>
</ul>

<p>则该算式的Computation Graph可以表示如下</p>

<p><img src="/assets/images/2018/01/dp-w2-1.png" class="md-img-center" /></p>

<p>接下来我们要思考如何对Graph中的每一项进行求导，这将是后面计算神经网络backpropagation的基础。显然如果有微积分基础的话，这并不难</p>

<ul>
  <li>$\frac{dJ}{dv} = 3$</li>
  <li>$\frac{dJ}{du} = \frac{dJ}{dv} \times \frac{dv}{du} = 3 \times 1 = 3$</li>
  <li>$\frac{dJ}{da} = \frac{dJ}{dv} \times \frac{dv}{da} = 3 \times 1 = 3$</li>
  <li>$\frac{dJ}{db} = \frac{dJ}{dv} \times \frac{dv}{du} \times \frac{du}{db} = 3 \times 1 \times c = 3c$</li>
  <li>$\frac{dJ}{dc} = \frac{dJ}{dv} \times \frac{dv}{du} \times \frac{du}{dc} = 3 \times 1 \times b = 3b$</li>
</ul>

<p>在接下来的代码中，我们需要表示上面的每个导数值，其表示方式为</p>

<script type="math/tex; mode=display">\frac{dFinalOutputVar}{dvar}</script>

<p>这种写法太过冗余，因此，如果想表示$\frac{dJ}{da}$，在代码中可直接写成<code class="highlighter-rouge">da</code>，其余同理，计算这些变量到数值的过程，可类比于神经网络的backpropagation</p>

<p><img src="/assets/images/2018/01/dp-w2-2.png" class="md-img-center" /></p>

<h3 id="loss-function">Loss Function</h3>

<p>理解了Computation Graph，我们回到算梯度下降上来，我们先看一种简单的情况，假设我们只有一组训练样本，该样本中只有两个feature，$x_1$和$x_2$，我们用$w_1$和$w_2$表示两个feature对应的权重，则预测的model可以表示为</p>

<script type="math/tex; mode=display">\hat{y} = \sigma(z) = \sigma(w_1x_1 + w_2x_2 + b) \\</script>

<p>为了求解$w_1$和$w_2$，结合上面给出的Loss函数，得到生成的Computation Graph如下</p>

<blockquote>
  <p>注意这里使用的是Loss函数，而不是Cost函数，因为当前case为单一的样本，不涉及到所有的样本集</p>
</blockquote>

<p><img src="/assets/images/2018/01/dp-w2-3.png" class="md-img-center" /></p>

<p>为了使Loss函数的值最小，我们需要使用梯度下降来计算$w_1$,$w_2$和$b$</p>

<script type="math/tex; mode=display">w_1 := w_1 - \alpha\frac{dL(a,y)}{dw_1} \\
w_2 := w_2 - \alpha\frac{dL(a,y)}{dw_2} \\
b := b - \alpha\frac{dL(a,y)}{db}</script>

<p>接下来利用前面提到的求偏导的方式，一步步反向计算得到 $w_1$ 和 $w_2$的最终值，如下图所示</p>

<p><img src="/assets/images/2018/01/dp-w2-4.png" class="md-img-center" /></p>

<ul>
  <li>$da = \frac {dL(a,y)} {da} = - \frac{y}{a} + \frac{1-y}{1-a}$</li>
  <li>$dz = \frac {dL(a,y)} {dz} = \frac {dL(a,y)}{da} \times \frac {da}{dz} = a-y$</li>
  <li>$dw_1 = \frac {dL(a,y)} {dw_1} = x_1 \times dz$</li>
  <li>$dw_2 = \frac {dL(a,y)} {dw_2} = x_2 \times dz$</li>
</ul>

<h3 id="cost-function-1">Cost Function</h3>

<p>接着我们可以考虑使用上述方法来计算逻辑回归的cost function，如前所述，对于任意一组的训练集，我们用$x^{(i)}$表示第i个样本， 每个样本$x^{(i)}$包含$n$个feature，则$x^{(i)}$是<code class="highlighter-rouge">n x 1</code>的，每组样本的预测结果用$\hat{y}^{(i)}$或$a^{(i)}$表示，假设整个训练集有$m$组样本，则对于cost function可以表示为</p>

<script type="math/tex; mode=display">J(w,b) = \frac{1}{m}\sum_{i=1}^{m}L(a^{(i)}, y) \\
\hat{y}^{(i)} = a^{(i)} = \sigma(z^{(i)}) = \sigma(w^tx^{(i)} + b)</script>

<p>可以看到，cost函数只是loss函数的平均值，现在我们假设$n=2$，则每组样本都有两个feature，对应的$w^{(i)}$是$2\times1$的，即<code class="highlighter-rouge">[w1,w2]</code>，因此对$dw_1^{(i)}$的计算只需要循环$m$次累加$\frac{d(a^{(i)}, y^{(i)})}{dw_1}$，然后求平均即可，$dw_2^{(i)}$同理</p>

<script type="math/tex; mode=display">\frac{dJ(w,b)}{dw_1} = \frac{1}{m}\sum_1^{m}\frac{d(a^{(i)}, y^{(i)})}{dw_1}</script>

<p>伪代码如下</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">J</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">dw1</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">dw2</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">db</span><span class="o">=</span><span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span> <span class="n">to</span> <span class="n">m</span> 
    <span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">tx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span>
    <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="n">J</span> <span class="o">+=</span> <span class="o">-</span><span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">log</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="n">dz</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span> <span class="n">to</span> <span class="n">n</span>
        <span class="n">dw</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">dz</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="c1">#第i组样本的第j个feature
</span>    <span class="n">db</span> <span class="o">+=</span> <span class="n">dz</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="c1"># if n = 2
</span>            <span class="c1">#dw1 += x[i][1] * dz[i]
</span>            <span class="c1">#dw2 += x[i][2] * dz[i]
</span><span class="n">dw1</span> <span class="o">=</span> <span class="n">dw1</span> <span class="o">/</span> <span class="n">m</span>
<span class="n">dw2</span> <span class="o">=</span> <span class="n">dw2</span> <span class="o">/</span> <span class="n">m</span>
<span class="n">db</span>  <span class="o">=</span> <span class="n">db</span> <span class="o">/</span> <span class="n">m</span>

<span class="n">w1</span> <span class="o">=</span> <span class="n">w1</span> <span class="o">-</span> <span class="n">alpha</span><span class="o">*</span><span class="n">dw1</span>
<span class="n">w2</span> <span class="o">=</span> <span class="n">w2</span> <span class="o">-</span> <span class="n">alpha</span><span class="o">*</span><span class="n">dw2</span>
<span class="n">b</span>  <span class="o">=</span> <span class="n">b</span> <span class="o">-</span> <span class="n">alpha</span><span class="o">*</span><span class="n">db</span>
</code></pre></div></div>
<p>上面代码展示了某一次梯度下降的计算过程</p>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://www.coursera.org/specializations/deep-learning">Deep Learning Specialization Course on Coursera</a></li>
  <li><a href="https://livebook.manning.com/book/deep-learning-with-pytorch/welcome/v-10/">Deep Learning with PyTorch</a></li>
</ul>

<h2 id="附录vectorization-using-numpy">附录：Vectorization using Numpy</h2>

<p>由于深度学习涉及大量的矩阵间的数值计算，而且数据量有很大，使用<code class="highlighter-rouge">for</code>计算时间成本太高。Vectorization是用来取代for循环的一种针对矩阵数值计算的计算方式，其底层可以通过GPU或者CPU(SIMD)的并行指令集来实现。不少数值计算库都有相应的实现，比如Python的Numpy，C++的Eigen等。</p>

<p>比如我们想要计算$z = w^Tx+b$，我们假设$x$和$w$都是<code class="highlighter-rouge">nx1</code>的向量，我们使用Python来对比下两种计算方式的差别</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#for loop
</span><span class="n">z</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
    <span class="n">z</span> <span class="o">+=</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="n">z</span><span class="o">+=</span><span class="n">b</span>

<span class="c1"># use numpy
# vectorized version of doing 
# matrix multiplications
</span><span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">w</span><span class="o">.</span><span class="n">T</span><span class="p">,</span><span class="n">x</span><span class="p">)</span><span class="o">+</span><span class="n">b</span> 
</code></pre></div></div>
<p>numpy数组的另一个特点是可以做element-wise的矩阵运算，这样让我们避开了for循环的使用</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>  <span class="c1">#[1,1]
</span><span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="mi">2</span> <span class="c1">#[2,2]
</span></code></pre></div></div>
<p>接下来我们可以使用numpy重新实现以下上一节计算<code class="highlighter-rouge">dw</code>代码的for循环部分</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">J</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">db</span><span class="o">=</span><span class="mi">0</span>
<span class="n">dw</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="n">n</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span> 
<span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span> <span class="n">to</span> <span class="n">m</span> 
    <span class="c1">#z是1xm的
</span>    <span class="c1">#x是nxm的
</span>    <span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">tx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span>
    <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="n">J</span> <span class="o">+=</span> <span class="o">-</span><span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">log</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="n">dz</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="c1"># for j=1 to n
</span>        <span class="c1"># dw[j] += x[i][j] * dz[i] #第i组样本的第j个feature
</span>    <span class="n">dw</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">dz</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">db</span> <span class="o">+=</span> <span class="n">dz</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="n">dw</span> <span class="o">=</span> <span class="n">dw</span><span class="o">/</span><span class="n">m</span>
</code></pre></div></div>
<p>在前面第一节计算矩阵$Z$的式子上</p>

<script type="math/tex; mode=display">% <![CDATA[
Z=
\begin{bmatrix}
z^{(1)} & z^{(2)} & . & . & . &z^{(m)}  
\end{bmatrix}
= w^{T}X + 
\begin{bmatrix}
b_1 & b_2 & . & . & . &b_n
\end{bmatrix} %]]></script>

<p>如果使用numpy表示，则只需要一行代码</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">w</span><span class="o">.</span><span class="n">T</span><span class="p">,</span><span class="n">X</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span> <span class="c1">#b is a 1x1 number
</span></code></pre></div></div>

<p>在通过Loss函数计算w值时，我们曾给出过下面式子</p>

<script type="math/tex; mode=display">dz^{(1)} = a^{(1)} - y^{(1)} \\
dz^{(2)} = a^{(2)} - y^{(2)} \\
... \\
dz^{(i)} = a^{(i)} - y^{(i)} \\</script>

<p>训练集共有$m$，则$dz$的矩阵(<code class="highlighter-rouge">1xm</code>)表示为</p>

<script type="math/tex; mode=display">dZ = [dz^{(1)}, dz^{(2)}, ... , dz^{(m)}]</script>

<p>另 $A = [a^{(i)}…a^{(m)}]$, $Y = [y^{(i)}…y^{(m)}]$，则</p>

<script type="math/tex; mode=display">dZ = A - Y = [a^{(1)} - y^{(1)}, a^{(2)} - y^{(2)}, ... , a^{(m)} - y^{(m)}]</script>

<p>在前面求解$dw$的代码中，我们虽然将$dw$向量化后减少了一重循环，但最外层还有一个<code class="highlighter-rouge">[1,m]</code>的for循环，接下来我们也可以将这个for循环向量化。</p>

<p>我们的目的是求解$dw$和$d$`，其中$db$为</p>

<script type="math/tex; mode=display">db = \frac{1}{m}\sum_{i=1}^{m}dz^{(i)}</script>

<p>上述式子可以用numpy一行表示 <code class="highlighter-rouge">db = 1/m * np.sum(dZ)</code>，对于$dw$，有</p>

<script type="math/tex; mode=display">% <![CDATA[
dw = \frac{1}{m}XdZ^T \\
= \frac{1}{m}
\begin{bmatrix}
. & . & . & . & . & . & . \\
. & . & . & . & . & . & . \\
x^{(1)} & x^{(2)} & x^{(3)} & . & . & . & x^{(m)} \\
. & . & . & . & . & . & . \\
. & . & . & . & . & . & . \\
\end{bmatrix}
\begin{bmatrix}
dz^{(1)} \\
. \\
. \\
. \\
dz^{(m)}
\end{bmatrix}
= \frac{1}{m}[x^{(1)}dz^{(1)},..., x^{(m)}dz^{(m)}] %]]></script>

:ET