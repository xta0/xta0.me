I"l><h2 id="霍夫曼huffman树">霍夫曼(Huffman)树</h2>

<p>霍夫曼树是一种特殊的二叉树组织形式，用来实现霍夫曼编码，霍夫曼编码是一种不等长编码技术。所谓非等长编码，是根据字符出现的频率高低对字符进行不同位数的编码，一般希望经常出现的字符编码比较短，不经常出现的字符编码较长。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Z  K  F  C  U  D  L  E
2  7  24 32 37 42 42 120
</code></pre></div></div>

<p>例如上面字符中，每个下面为其对应出现的频率。我们可以对这些字符进行编码，例如<code class="highlighter-rouge">Z=111100</code>，<code class="highlighter-rouge">K(111101)</code>。每个字符的编码需要满足一个条件，即编码规则为<mark>前缀编码</mark>。所谓前缀编码要求任何一个字符的编码都不是另外一个字符编码的前缀，这种前缀特性保证了译码的唯一性。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Z(111100),K(111101),
F(11111),C(1110),
U(100),D(101), 
L(110),E(0)
</code></pre></div></div>
<p>假设我们已经有了上述的编码表，对于<code class="highlighter-rouge">000110</code>可以翻译出唯一的字符串<code class="highlighter-rouge">EEEL</code>。因此我们需要寻找一种编码方法使得：</p>

<ol>
  <li>频率高的字符占用存储空间少</li>
  <li>编码规则符合前缀码要求</li>
</ol>

<p>将这个问题抽象一下，对于$n$个字符$K_0$，$K_1$，…，$K_{n-1}$，它们的使用频率分别为$w_0$, $w_1$，…，$w_{n-1}$，给出它们的前缀编码，使得总编码效率最高</p>

<ul>
  <li>霍夫曼树</li>
</ul>

<p>为了实现上述编码规则，我们需要设计这样一棵树：</p>

<ol>
  <li>给出一个具有$n$个外部节点($n$个待编码字符)的扩充二叉树</li>
  <li>令该二叉树每个外部节点$K_i$ 有一个权 $w_i$ 外部路径长度为$l_i$</li>
  <li>使这个扩充二叉树的<mark>叶节点带权外部路径长度总和</mark>为$\sum_{i=0}^{n-1}l_i * w_i $ 最小</li>
</ol>

<p>我们把具有这样性质的树叫做Huffman树，它是一种带权路径长度最短的二叉树，也称为最优二叉树。如下图中，左边树构建方式的带权路径和为：(2+7+24+32)x2 = 130, 右边树构建方式的带权路径和为：32x1+24x2 +(2+7)x3 = 107。</p>

<p><img src="/assets/images/2008/07/tree-10.png" style="margin-left:auto; margin-right:auto;display:block" /></p>

<ul>
  <li>构建Huffman树</li>
</ul>

<blockquote>
  <p>贪心法</p>
</blockquote>

<ol>
  <li>将节点按照权值从小到大排列</li>
  <li>拿走前两个权值最小的节点，创建一个节点，权值为两个节点权值之和，将两个节点挂在新节点上</li>
  <li>将新节点的权值放回序列，使权值顺序保持</li>
  <li>重复上述步骤，直到序列处理完毕
5，所有待编码的节点都处在叶子位置</li>
</ol>

<p>假设有一组节点的优先级序列为: <code class="highlighter-rouge">2 3 5 7 11 13 17 19 23 29 31 37 41</code>，对应的Huffman树为：</p>

<p><img src="/assets/images/2008/07/tree-9.jpg" style="margin-left:auto; margin-right:auto;display:block" /></p>

<ul>
  <li>编码</li>
</ul>

<p>有了Huffman树，就可按路径对叶子节点(待编码字符)进行霍夫曼编码，例如上图中的每个叶子节点的编码为：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d0 ： 1011110   d1 ： 1011111
d2 ： 101110    d3 ： 10110
d4 ： 0100      d5 ： 0101
d6 ： 1010      d7 ： 000
d8 ： 001       d9 ： 011
d10： 100       d11 ：110  d12： 111
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//前序遍历，得到每个叶子节点的霍夫曼编码</span>
<span class="kt">void</span> <span class="nf">traverse</span><span class="p">(</span><span class="n">HuffmanTreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">codes</span><span class="p">){</span>
    
    <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">&amp;&amp;</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">==</span><span class="nb">NULL</span><span class="o">&amp;&amp;</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">==</span><span class="nb">NULL</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">num</span> <span class="o">:</span> <span class="n">codes</span><span class="p">){</span>
            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">num</span><span class="o">&lt;&lt;</span><span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">){</span>
        <span class="n">codes</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'0'</span><span class="p">);</span>
        <span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span><span class="n">codes</span><span class="p">,</span><span class="n">dictionary</span><span class="p">);</span>
        <span class="n">codes</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span> <span class="c1">//回溯</span>
    <span class="p">}</span>
    
    <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">){</span>
        <span class="n">codes</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'1'</span><span class="p">);</span>
        <span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">codes</span><span class="p">,</span><span class="n">dictionary</span><span class="p">);</span>
        <span class="n">codes</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span><span class="c1">//回溯</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>译码</li>
</ul>

<p>与编码过程相逆，从左至右逐位判别代码串，直至确定一个字符</p>

<ol>
  <li>从树的根节点开始
    <ul>
      <li><code class="highlighter-rouge">0</code>下降到左分支</li>
      <li><code class="highlighter-rouge">1</code>下降到右分支</li>
    </ul>
  </li>
  <li>到达一个树叶节点，对应的字符就是文本信息的字符</li>
  <li>译出了一个字符，再回到树根，从二进制位串中的下一位开始继续译码</li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>译码: 111101110

111 -&gt; d12
101110 -&gt; d0

111101110 -&gt;d12d0
</code></pre></div></div>

<ul>
  <li>构建Huffman树</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HuffmanTree</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">weight</span><span class="p">,</span> <span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">;){</span>
    <span class="n">HuffmanTreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">;</span> 
    <span class="n">HuffmanTree</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">weight</span><span class="p">){</span>
        <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">HuffmanTreeNode</span><span class="o">*</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">HuffmanTreeNode</span><span class="o">*</span> <span class="o">&gt;</span><span class="p">,</span><span class="n">comp</span><span class="o">&gt;</span> <span class="n">heap</span><span class="p">;</span> <span class="c1">//最小堆</span>
        <span class="kt">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="n">weight</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="n">HuffmanTreeNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HuffmanTreeNode</span><span class="p">();</span>
            <span class="n">node</span><span class="o">-&gt;</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
            <span class="n">heap</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">//两个节点合成一个，共有n-1次合并建立Huffman树</span>
            <span class="n">HuffmanTreeNode</span><span class="o">*</span> <span class="n">first</span> <span class="o">=</span> <span class="n">heap</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
            <span class="n">heap</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="n">HuffmanTreeNode</span><span class="o">*</span> <span class="n">second</span> <span class="o">=</span> <span class="n">heap</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
            <span class="n">heap</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="n">HuffmanTreeNode</span><span class="o">*</span> <span class="n">parent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HuffmanTreeNode</span><span class="p">();</span>
            <span class="n">first</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
            <span class="n">second</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
            <span class="n">parent</span><span class="o">-&gt;</span><span class="n">weight</span> <span class="o">=</span> <span class="n">first</span><span class="o">-&gt;</span><span class="n">weight</span> <span class="o">+</span> <span class="n">second</span><span class="o">-&gt;</span><span class="n">weight</span><span class="p">;</span>
            <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span>  <span class="o">=</span> <span class="n">first</span><span class="p">;</span>
            <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">second</span><span class="p">;</span>
            <span class="n">heap</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>编码效率</li>
</ul>

<p>设平均每个字符的代码长度等于每个代码的长度$c_i$, 乘以其出现的概率$p_i$ ，即:</p>

<script type="math/tex; mode=display">l = c_0p_0 + c_1p_1 + … + c_{n-1}p_{n-1}</script>

<p>其中$p_i=f_i / f_T$, $f_i$为第$i$个字符的出现的次数，而$f_T$为所有字符出现的总次数。因此前面式子也可以写为</p>

<script type="math/tex; mode=display">c_0f_0 + c_1f_1 + … + c_{n-1}f_{n-1}) / f_T</script>

<p>则上图中的平均码长度为</p>

<script type="math/tex; mode=display">(3*(19+23+24+29+31+34+37+41)+4*(11+13+17)+ 5 * 7+6 * 5+7*(2+3)) / 238 = 804 / 238 ≈ 3.38</script>

<p>对于这13个字符，如果采用等长编码每个字符需要$⌈log13⌉=4$位，显然Huffman编码效率更高，只需要等长编码$3.38/4≈ 84\% $ 的空间</p>

<ul>
  <li>应用
    <ul>
      <li>Huffman编码适合于字符<mark>频率不等，差别较大</mark>的情况</li>
      <li>数据通信的二进制编码
        <ul>
          <li>不同的频率分布，会有不同的压缩比率</li>
          <li>大多数的商业压缩程序都是采用几种编码方式以应付各种类型的文件
            <ul>
              <li>Zip 压缩就是 LZ77 与 Huffman 结合</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>归并法外排序，合并顺串</li>
    </ul>
  </li>
</ul>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="https://www.youtube.com/watch?v=NcZ2cu7gc-A&amp;list=PLnfg8b9vdpLn9exZweTJx44CII1bYczuk">CS106B-Stanford-YouTube</a></li>
  <li><a href="https://www.coursera.org/learn/algorithms-divide-conquer/home/welcome">Algorithms-Stanford-Cousera</a></li>
  <li><a href="https://www.coursera.org/learn/shuju-jiegou-suanfa/home/welcome">算法与数据结构-1-北大-Cousera</a></li>
  <li><a href="https://www.coursera.org/learn/gaoji-shuju-jiegou/home/welcome">算法与数据结构-2-北大-Cousera</a></li>
  <li><a href="https://courses.edx.org/courses/course-v1:TsinghuaX+30240184.1x+3T2017/course/">算法与数据结构-1-清华-EDX</a></li>
  <li><a href="https://courses.edx.org/courses/course-v1:PekingX+04833050X+1T2016/course/">算法与数据结构-2-清华-EDX</a></li>
  <li><a href="https://www.coursera.org/learn/algorithms/home/welcome">算法设计与分析-1-北大-Cousera</a></li>
  <li><a href="https://courses.edx.org/courses/course-v1:PekingX+04833050X+1T2016/course/">算法设计与分析-2-北大-EDX</a></li>
</ul>

:ET