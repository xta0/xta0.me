I"/<h3 id="配置ruby环境">配置Ruby环境</h3>

<ul>
  <li>
    <p>install rvm:</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  % gpg --keyserver hkp://keys.gnupg.net 
  --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB`

  % curl -sSL https://get.rvm.io | bash
  % source ~/.rvm/scripts/rvm
</code></pre></div>    </div>
  </li>
  <li>install ruby
    <ul>
      <li><code class="highlighter-rouge">rvm install ruby_version</code></li>
    </ul>
  </li>
  <li>install jekyll
    <ul>
      <li><code class="highlighter-rouge">gem install jekyll</code></li>
    </ul>
  </li>
</ul>

<h3 id="配置nginx反向代理">配置Nginx反向代理</h3>

<p>我们可以使用Nginx作为HTTP web server,令ROOT指向Jekyll的<code class="highlighter-rouge">_site</code>下的<code class="highlighter-rouge">index.html</code>，配置Nginx 如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#root folder</span>
root /home/xxx/_site/<span class="p">;</span>
index index.html index.htm index.md<span class="p">;</span>
</code></pre></div></div>
<p>启动Nginx，即可测试首页是否能正确显示</p>

<h3 id="配置nodejs">配置Nodejs</h3>

<p>尽量不要使用<code class="highlighter-rouge">apt-get</code>来安装Node.js,如果已经安装了，执行:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%sudo apt-get purge nodejs 
%sudo apt-get autoremove 
%sudo apt-get autoclean
</code></pre></div></div>

<ul>
  <li>Install nvm &amp; node:</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% curl <span class="nt">-o-</span> https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash

%nvm list
%nvm ls-remote
%nvm <span class="nb">install </span>10.7.0
%nvm use 10.7.0
%nvm <span class="nb">alias </span>default 10.7.0
%node <span class="nt">-v</span>
%npm <span class="nb">install</span> <span class="nt">-g</span> npm
%npm <span class="nt">-v</span>
%echo fs.inotify.max_user_watches<span class="o">=</span>524288 | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/sysctl.conf <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>sysctl <span class="nt">-p</span>
</code></pre></div></div>

<h3 id="配置持续集成环境">配置持续集成环境</h3>

<p>Jekyll的持续集成有很多种方式，这里介绍一种使用Node.js作为Server响应Github Webhook的方式。对于什么是Webhook，可参考<a href="https://developer.github.com/webhooks/">这里</a>。其大致思路是：</p>

<ol>
  <li>每当有一个次commit到Github的Jekyll Blog仓库，Github会发送一条POST请求到我们的Server</li>
  <li>这时候Ngxin作为反向代理，将请求路由到内部的Node.js服务上</li>
  <li>Node.js收到请求后，执行一段shell脚本，重新build Jekyll blog</li>
</ol>

<p>因此第一步是要先配置Github的Webhook发送策略，配置方式<a href="https://developer.github.com/webhooks/creating/">参考这里</a>。Webhook配置完成后，需要在Nginx配置文件中，指定反向代理路径，参考配置如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location /api <span class="o">{</span>
	proxy_http_version 1.1<span class="p">;</span>
	proxy_set_header Upgrade <span class="nv">$http_upgrade</span><span class="p">;</span>
	proxy_set_header Connection <span class="s1">'upgrade'</span><span class="p">;</span>
	proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
	proxy_cache_bypass <span class="nv">$http_upgrade</span><span class="p">;</span>
	proxy_pass http://127.0.0.1:1234<span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>上述配置会将所有<code class="highlighter-rouge">/api</code>的请求路由到<code class="highlighter-rouge">http://127.0.0.1:1234;</code>上，因此我们需要写一个Node.js Server来监听这个端口：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
<span class="c1">//middleware</span>
<span class="c1">//body parser</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyparser</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyparser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span><span class="na">extended</span><span class="p">:</span><span class="kc">false</span><span class="p">}))</span>

<span class="c1">//bunyan log</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span><span class="nx">res</span><span class="p">,</span><span class="nx">next</span><span class="p">){</span>
    <span class="nx">logger</span><span class="p">.</span><span class="nx">info</span><span class="p">({</span>
        <span class="na">header</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">),</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nx">next</span><span class="p">()</span>
<span class="p">})</span>

<span class="c1">//router</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api</span><span class="dl">'</span><span class="p">,</span><span class="nx">indexRouter</span><span class="p">)</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/webhook</span><span class="dl">'</span><span class="p">,</span><span class="nx">webhookRouter</span><span class="p">)</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span><span class="dl">"</span><span class="s2">127.0.0.1</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">logger</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">"</span><span class="s2">Server Started!</span><span class="dl">"</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>
<p>上述代码中，当收到<code class="highlighter-rouge">/api/webhook</code>请求时，需要执行一段shell脚本来拉取最新的commit并重新build Jekyll，shell脚本参考如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

build<span class="o">(){</span>
    <span class="nb">cd</span> ..
    <span class="nv">site_dir</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>
    <span class="nv">repo_name</span><span class="o">=</span><span class="s2">"***"</span>
    <span class="nv">repo_git</span><span class="o">=</span><span class="s2">"***"</span>
    <span class="nb">echo</span> <span class="s2">"Direcotor: </span><span class="nv">$site_dir</span><span class="s2">"</span>
    <span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$repo_name</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"No repo: </span><span class="nv">$repo_name</span><span class="s2"> found in </span><span class="nv">$site_dir</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"Begin cloning..."</span>
        git clone <span class="nv">$repo_git</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"clone failed!"</span>
    <span class="k">fi 
    </span><span class="nb">echo</span> <span class="s2">"Found </span><span class="nv">$repo_name</span><span class="s2"> in </span><span class="nv">$site_dir</span><span class="s2">"</span>
    <span class="nb">cd</span> <span class="nv">$repo_name</span>
    <span class="nb">echo</span> <span class="s2">"Pulling new commits..."</span>
    git pull origin master
    <span class="nb">echo</span> <span class="s2">"Running jekyll build, this may take a while...."</span>
    <span class="nv">JEKYLL_ENV</span><span class="o">=</span>production jekyll build <span class="o">||</span> <span class="s2">"jekyll build failed!"</span>
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$?</span><span class="s2">"</span> <span class="nt">-eq</span> <span class="s2">"0"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Build Succeed"</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"Build Failed!"</span>
        <span class="k">return </span>1
    <span class="k">fi
    </span><span class="nv">app_dir</span><span class="o">=</span><span class="s2">"</span><span class="nv">$site_dir</span><span class="s2">/site"</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="nv">$app_dir</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Found old app folder, delete it."</span>
        <span class="nb">rm</span> <span class="nt">-rf</span> <span class="nv">$app_dir</span>
    <span class="k">else
        </span><span class="nb">mkdir</span> <span class="nv">$app_dir</span>
    <span class="k">fi
    </span><span class="nb">echo</span> <span class="s2">"Copying new app to site."</span>
    <span class="nb">cp</span> <span class="nt">-R</span> _site <span class="nv">$app_dir</span>
    <span class="nb">echo</span> <span class="s2">"Done"</span>
<span class="o">}</span>
build
</code></pre></div></div>

<p>对于上述代码，如果感兴趣，完整的Server的代码在<a href="https://github.com/xta0/Github-Webhook">这里</a>（不要忘记给个star哦）。当然，对于Jekyll的CI还有其它的方式，比较轻量的是使用Github自带的服务，可参考<a href="https://jekyllrb.com/docs/github-pages/">Github相关教程</a>。此外还使用Travis CI的方式，这种方式可能会暴露Webhook的secret，比建议使用，更多CI的文档，可参考Jekyll<a href="https://jekyllrb.com/docs/continuous-integration/">官方文档</a>。</p>

<h3 id="resource">Resource</h3>

<ul>
  <li><a href="https://yoember.com/nodejs/the-best-way-to-install-node-js/">The Best Way to Install Node.js</a></li>
  <li><a href="https://jekyllrb.com/docs/continuous-integration/">Jekyll Continuous Integration</a></li>
  <li><a href="https://developer.github.com/webhooks/">Webhooks</a></li>
  <li><a href="https://developer.github.com/webhooks/creating/">Setup Gethub Webhooks</a></li>
  <li><a href="https://github.com/xta0/Github-Webhook">Github Webhook Server in Node.js</a></li>
</ul>
:ET