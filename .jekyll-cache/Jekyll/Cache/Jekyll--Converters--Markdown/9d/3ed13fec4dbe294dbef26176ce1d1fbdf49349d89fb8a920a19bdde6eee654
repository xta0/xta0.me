I"1,<h2 id="lldb">LLDB</h2>

<h3 id="常用命令">常用命令</h3>

<ul>
  <li>列出和某个命令相关的命令：<code class="highlighter-rouge">apropos thread</code></li>
  <li>列出所有break points: <code class="highlighter-rouge">(lldb) br l</code></li>
  <li>删掉break: <code class="highlighter-rouge">br delete 1</code></li>
  <li>开关break: <code class="highlighter-rouge">br e 1</code>,<code class="highlighter-rouge">br di 1</code></li>
  <li>设置break point: <code class="highlighter-rouge">b MyViewController.m :30</code></li>
  <li>继续:<code class="highlighter-rouge">c</code></li>
  <li>断点后但不执行<code class="highlighter-rouge">n</code>,</li>
  <li>进入某个函数:<code class="highlighter-rouge">s</code></li>
  <li>结束:<code class="highlighter-rouge">finish</code></li>
  <li>执行表达式<code class="highlighter-rouge">expr</code></li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#隐藏view</span>
<span class="nb">expr </span>self.view.hidden <span class="o">=</span> <span class="nb">yes</span>
<span class="c">#variable:</span>
<span class="nb">expr </span>int <span class="nv">$a</span> <span class="o">=</span> 100 定义一个a变量值为100
</code></pre></div></div>

<h3 id="增加符号断点">增加符号断点</h3>

<ul>
  <li>给所有viewdidload打断点:<code class="highlighter-rouge">br set -n viewDidLoad</code></li>
  <li>根据condition打断点：<code class="highlighter-rouge">br mod -c "totalValue &gt; 1000" 3</code></li>
  <li>进入命令行模式：</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>lldb<span class="o">)</span> br com add 2
Enter your debugger <span class="nb">command</span><span class="o">(</span>s<span class="o">)</span><span class="nb">.</span>  Type <span class="s1">'DONE'</span> to end.
<span class="o">&gt;</span> bt
<span class="o">&gt;</span> <span class="k">continue</span>
<span class="o">&gt;</span> DONE
</code></pre></div></div>

<h3 id="函数堆栈线程相关">函数堆栈,线程相关</h3>

<ul>
  <li><code class="highlighter-rouge">bt</code> = <code class="highlighter-rouge">thread backtrace</code></li>
  <li><code class="highlighter-rouge">br all</code></li>
  <li><code class="highlighter-rouge">thread list</code></li>
  <li><code class="highlighter-rouge">frame info</code></li>
  <li><code class="highlighter-rouge">frame select &lt;num&gt;</code></li>
  <li><code class="highlighter-rouge">frame variable</code></li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>lldb<span class="o">)</span> frame variable
<span class="o">(</span>TBCityStoreMenuViewController <span class="k">*</span>const<span class="o">)</span> self <span class="o">=</span> 0x09646820
<span class="o">(</span>SEL<span class="o">)</span> _cmd <span class="o">=</span> <span class="s2">"onCoverFlowLayoutClicked:"</span>
<span class="o">(</span>UIButton <span class="k">*</span><span class="o">)</span> btn <span class="o">=</span> 0x09665d40
<span class="o">(</span>lldb<span class="o">)</span> frame variable self
<span class="o">(</span>TBCityStoreMenuViewController <span class="k">*</span>const<span class="o">)</span> self <span class="o">=</span> 0x09646820
</code></pre></div></div>
<ul>
  <li><code class="highlighter-rouge">frame variable -F self</code></li>
  <li><code class="highlighter-rouge">watchpoint list</code></li>
  <li><code class="highlighter-rouge">watchpoint delete 1</code></li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#监控变量_x是否发生变化</span>
watchpoint <span class="nb">set </span>variable _x

<span class="o">(</span>lldb<span class="o">)</span> watchpoint <span class="nb">set </span>variable _type
Watchpoint created: Watchpoint 1: addr <span class="o">=</span> 0x0955c8d0 size <span class="o">=</span> 4 state <span class="o">=</span> enabled <span class="nb">type</span> <span class="o">=</span> w
    watchpoint spec <span class="o">=</span> <span class="s1">'_type'</span>
    new value: kGrid
</code></pre></div></div>
<p>如果x发生变化：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Watchpoint 1 hit:
old value: kGrid
new value: kCover
</code></pre></div></div>

<h3 id="添加python-script">添加Python script</h3>

<ul>
  <li>LLDB contains an embedded python interperter，The entire API is exposed through python scripting bindings:</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>lldb<span class="o">)</span> script print<span class="o">(</span>sys.version<span class="o">)</span>
2.7.5 <span class="o">(</span>default, Aug 25 2013, 00:04:04<span class="o">)</span> 
<span class="o">[</span>GCC 4.2.1 Compatible Apple LLVM 5.0 <span class="o">(</span>clang-500.0.68<span class="o">)]</span>
</code></pre></div></div>

<ul>
  <li>The script command parses raw Python commands:</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>lldb<span class="o">)</span> script
Python Interactive Interpreter. To <span class="nb">exit</span>, <span class="nb">type</span> <span class="s1">'quit()'</span>, <span class="s1">'exit()'</span> or Ctrl-D.
<span class="o">&gt;&gt;&gt;</span> a <span class="o">=</span> 3
<span class="o">&gt;&gt;&gt;</span> print a
3
</code></pre></div></div>

<ul>
  <li>Run python scripts from a breakpoint
    <ul>
      <li>LLDB creates a Python function to encapsulate the scripts</li>
      <li>if yout want to access the script variables outside the breakpoint,you must declare thhem as global variables</li>
    </ul>
  </li>
  <li>通过打断点来调用python函数：</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>lldb<span class="o">)</span> breakpoint <span class="nb">command </span>add <span class="nt">-s</span> python 1<span class="o">(</span><span class="nb">break </span>point的id<span class="o">)</span>
<span class="o">(</span>lldb<span class="o">)</span> breakpoint <span class="nb">command </span>add <span class="nt">-s</span> python
Enter your Python <span class="nb">command</span><span class="o">(</span>s<span class="o">)</span><span class="nb">.</span> Type <span class="s1">'DONE'</span> to end.
def <span class="k">function</span><span class="o">(</span>frame,bp_loc,internal_dict<span class="o">)</span>:
    <span class="s2">"""frame: the SBFrame for the location at which you stopped
       bp_loc: an SBBreakpointLocation for the breakpoint location information
       internal_dict: an LLDB support object not to be used"""</span>

	//填写python函数体：
	variables <span class="o">=</span> frame.GetVariables<span class="o">(</span>False,True,False,True<span class="o">)</span>
	<span class="k">for </span>i <span class="k">in </span>range<span class="o">(</span>0,variables.GetSize<span class="o">())</span>:
		variable <span class="o">=</span> variables.GetValueAtIndex<span class="o">(</span>i<span class="o">)</span>
		print variable
		DONE
</code></pre></div></div>

<ul>
  <li>将方法定义在python脚本中：</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def breakpoint_func<span class="o">(</span>frame,bp_loc,dict<span class="o">)</span>:

frame : current stack frame of the breakpoint
bp_loc : the current breakpoint location
dict : the python session dictionary

<span class="c">#函数返回false，则lldb继续执行</span>
<span class="c">#函数返回true，则lldb暂停执行</span>
</code></pre></div></div>

<ul>
  <li>import exsting scripts to be used during your debugging session
    <ul>
      <li>将python文件引入进来<code class="highlighter-rouge">(lldb) command script import ~/my_script.py</code></li>
      <li>将breakpoint和python函数关联起来：<code class="highlighter-rouge">(lldb) breakpoint command add -F my.breakpoint_func</code></li>
      <li><code class="highlighter-rouge">command script import "/Users/moxinxt/Desktop/tbcity-ipad/iCoupon4Ipad/iCoupon4Ipad/breakpoint.py"</code></li>
    </ul>
  </li>
  <li>使用Facebook <a href="https://github.com/facebook/chisel">Chisel</a></li>
</ul>

<h3 id="attach到某个进程">Attach到某个进程</h3>

<p>我们也可以使用LLDB来debug某个进程：<code class="highlighter-rouge">process attach --name WWDCDemo --waitfor</code> //等待WWDCDemo启动，并将lldb挂到WWDCDemo上</p>

<h2 id="debug二进制">debug二进制</h2>

<h3 id="clang">Clang</h3>

<ul>
  <li><code class="highlighter-rouge">clang -c test.c</code>
    <ul>
      <li><code class="highlighter-rouge">-E</code> #preprocess,but done compile</li>
      <li><code class="highlighter-rouge">-S</code> #Compile, but don’t assemble</li>
      <li><code class="highlighter-rouge">-c</code> #Asseble, but don’t link</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">clang -o test test.c</code> 编译<code class="highlighter-rouge">test.c</code>，生成<code class="highlighter-rouge">test</code></li>
  <li><code class="highlighter-rouge">clang -o test test.m -framework foundation</code> 带上link的framework</li>
</ul>

<h3 id="lipo">Lipo</h3>

<ul>
  <li><code class="highlighter-rouge">lipo -info</code> 二进制包</li>
  <li><code class="highlighter-rouge">lipo xx.a -thin arm64</code></li>
</ul>

<h3 id="otool">otool</h3>

<p>otool用来查看Mach-O文件格式</p>
<ul>
  <li><code class="highlighter-rouge">otool -h</code>:查看头部信息</li>
  <li><code class="highlighter-rouge">otool -l</code>:查看LOAD CMD</li>
</ul>

<h3 id="dsym--dwarf">dSYM &amp; DWARF</h3>

<p>XCode自带了导出二进制符号表的工具:<code class="highlighter-rouge">dsymutil</code></p>

<ul>
  <li>提取.dSYM:<code class="highlighter-rouge">dsymutil xx.app/xx -o xx.dSYM</code></li>
  <li>查看dSYM中的UUID: <code class="highlighter-rouge">dwarfdump --uuid VZMachOTools.dSYM/Contents/Resources/DWARF</code></li>
  <li>查看dSYM中的info信息: <code class="highlighter-rouge">dwarfdump -e --debug-info VZMachOTools.dSYM/Contents/Resources/DWARF &gt; info.txt</code></li>
  <li>查看dSYM中的line信息: <code class="highlighter-rouge">dwarfdump -e --debug-line VZMachOTools.dSYM/Contents/Resources/DWARF &gt; line.txt</code></li>
</ul>

<h3 id="security--codesign">Security &amp; CodeSign</h3>

<p><code class="highlighter-rouge">Security</code>用来执行与证书签名相关的命令：</p>
<ul>
  <li>显示出所有可以用于签名的证书：<code class="highlighter-rouge">$ security find-identity -v -p codesigning </code></li>
</ul>

<h3 id="lldb-1">lldb</h3>

<h3 id="optool">optool</h3>

<ul>
  <li><a href="https://github.com/alexzielenski/optool">官方文档</a></li>
  <li>作用：
    <ul>
      <li>appstore 二进制 去壳：<code class="highlighter-rouge">./optool [-w] -t 二进制</code></li>
      <li>向二进制中注入dylib</li>
    </ul>
  </li>
</ul>
:ET