I"	<p>想要优化C程序，需要先理解编译器是如何编译C程序的，在前面文章中，曾介绍过编译器的一些基本命令，我们以一个Demo来回顾一下，先看这样一段代码：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  	<span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
  	<span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>  
 	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div>
<p>我们可以用GCC执行下面命令</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc -c machine_code.cpp //生成.o文件
xxd -b machine_code.o //生成二进制机器码文件
gcc -S machine_code.cpp //生成汇编代码
</code></pre></div></div>

<p>在上面命令中，我们用<code class="highlighter-rouge">-c</code>生成<code class="highlighter-rouge">.o</code>文件，用<code class="highlighter-rouge">xxd</code>命令可以得到<code class="highlighter-rouge">.o</code>文件的二进制表示，也就是机器码。由于机器码不具阅读性，我们可以使用<code class="highlighter-rouge">-S</code>生成汇编代码</p>

<h3 id="测试性能">测试性能</h3>

<p>不少IDE都提供Profile工具，比如<a href="https://docs.microsoft.com/en-us/visualstudio/profiling/beginners-guide-to-performance-profiling?view=vs-2017">Visual Studio</a>和[XCode](https://help.apple.com/instruments/mac/current/。我们也可以使用API测试代码执行时间：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt;ctime&gt;

std::clock_t start;
double duration;
start = std::clock();

function_name(var1, var2);

duration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
std::cout &lt;&lt; "duration milliseconds initialize beliefs " &lt;&lt; 1000 * duration &lt;&lt; '\n';
</code></pre></div></div>

<h3 id="优化技巧">优化技巧</h3>

<ul>
  <li>减少冗余代码</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// example of redundant code</span>
<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
   <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>上述代码可直接写为：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="n">x</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>使用定长vector</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Optimizing_compiler">Optimizing compiler</a></li>
</ul>
:ET