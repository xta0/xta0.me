I"5<h3 id="clangllvm-compilation-pipeline">Clang/LLVM Compilation Pipeline</h3>

<p>This lecture completes more of the story from Lecture 5 about the compilation process</p>

<p><img class="md-img-center" src="/assets/images/2021/08/perf-09-01.png" /></p>

<h3 id="why-study-the-compiler-optimizations">Why study the compiler optimizations?</h3>

<ul>
  <li>Compiler can have a big impact on software performance</li>
  <li>Compilers can save you performance-engineering work.</li>
  <li>Compilers help ensure that simple, readable, and maintainable code is fast</li>
  <li>You can understand the differences between the source code and the IR or assembly</li>
  <li>Compilers can make mistakes</li>
  <li>Understanding compilers can help you use them more effectively.</li>
</ul>

<h3 id="simple-model-of-the-compiler">Simple Model of the Compiler</h3>

<p>An optimizing compiler performs a sequence of transformation passes on the code</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LLVM IR -&gt; Transform -&gt; Transform -&gt; Transform -&gt; ... -&gt; Transform -&gt; Optimized LLVM IR
</code></pre></div></div>

<ul>
  <li>Each transofrmation pass analyzes and edits the code to try to optimize the code‚Äôs performance</li>
  <li>A transformation pass might run multiple times</li>
  <li>Passes run in a predetermined order that seems to work well most of the time</li>
</ul>

<h3 id="compiler-reports">Compiler Reports</h3>

<p>Clang/LLVM can produce <strong>reports</strong> for many of its transformation passes, not just vectorization:</p>

<ul>
  <li><code class="highlighter-rouge">-Rpass=&lt;string&gt;</code>: Produces reports of which optimizations matching <code class="highlighter-rouge">&lt;string&gt;</code> were successful.</li>
  <li><code class="highlighter-rouge">-Rpass-missed&lt;string&gt;</code>: Produces reports of which optimizations matching <code class="highlighter-rouge">&lt;string&gt;</code> were not successful.</li>
  <li><code class="highlighter-rouge">-Rpass-analysis=&lt;string&gt;</code>: Produces reports of the analyses performed by optimizations matching <code class="highlighter-rouge">&lt;string&gt;</code></li>
</ul>

<p>The argument <code class="highlighter-rouge">&lt;string&gt;</code> is a regular expression. To see the whole report, use ‚Äú.*‚Äù as the string.</p>

<p><img class="md-img-center" src="/assets/images/2021/08/perf-09-02.png" /></p>

<p>The good news: The compiler can tell you a lot about what‚Äôs doing</p>

<ul>
  <li>Many transformation passes in LLVM can report places where they successfully transform code.</li>
  <li>Many can also report the conclusions of their analysis.</li>
</ul>

<p>The bad news: Reports can be hard to understand.</p>

<ul>
  <li>The reports can be long and use LLVM jargon.</li>
  <li>Not all transformation passes generate reports.</li>
  <li>Reports don‚Äôt always tell the whole story.</li>
</ul>

<p>We want context for understanding these reports</p>

<h3 id="outline">Outline</h3>

<ul>
  <li>Example compiler optimizations
    <ul>
      <li>Optimizing a scalar</li>
      <li>Optimizing a structure</li>
      <li>Optimizing function calls</li>
      <li>Optimizing loops</li>
    </ul>
  </li>
  <li>Diagnosing failures
    <ul>
      <li>Case Study 1</li>
      <li>Case Study 2</li>
      <li>Case Study 3</li>
    </ul>
  </li>
</ul>

<h3 id="compiler-optimizations">Compiler Optimizations</h3>

<ul>
  <li>Data Structures
    <ul>
      <li>Register allocation</li>
      <li>Memory to registers</li>
      <li>Scalar replacement of aggregates</li>
    </ul>
  </li>
</ul>
:ET