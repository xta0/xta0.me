I"U<h3 id="git目录"><code class="highlighter-rouge">.git</code>目录</h3>

<p><code class="highlighter-rouge">.git</code>目录下包含很多配置信息，我们先从<code class="highlighter-rouge">HEAD</code>文件入手，<code class="highlighter-rouge">HEAD</code>是一个文本文件，我们可以用过<code class="highlighter-rouge">cat</code>命令查看其内容</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  .git git:<span class="o">(</span>master<span class="o">)</span> <span class="nb">cat </span>HEAD
ref: refs/heads/master
</code></pre></div></div>
<p><code class="highlighter-rouge">HEAD</code>文件中的内容表示我们当前工作在哪个分支上，我们可以用<code class="highlighter-rouge">git branch -av</code>命令来验证。从输出的信息上看，<code class="highlighter-rouge">HEAD</code>实际的指向是<code class="highlighter-rouge">.git</code>下的<code class="highlighter-rouge">refs/head/master</code>。对于<code class="highlighter-rouge">refs</code>目录，它包含下面几个文件夹</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  refs git:<span class="o">(</span>master<span class="o">)</span> <span class="nb">ls
</span>heads/   remotes/ tags/
</code></pre></div></div>
<p>其中<code class="highlighter-rouge">heads</code>包含了所有的本地分支，<code class="highlighter-rouge">remotes</code>中包含了远端分支，<code class="highlighter-rouge">tags</code>是所有tag节点。因此<code class="highlighter-rouge">HEAD</code>实际上指向的是一个本地分支的名称。假如我们现在本地分支在<code class="highlighter-rouge">master</code>上，我们可以在查看<code class="highlighter-rouge">heads/master</code>中的内容</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  heads git:<span class="o">(</span>master<span class="o">)</span> <span class="nb">cat </span>master
80ad70abdfe2b44364c9ac0b412a244a700269e7
➜  heads git:<span class="o">(</span>master<span class="o">)</span> git cat-file <span class="nt">-t</span> 80ad70abd <span class="c">#检查80ad70abd类型</span>
commit
</code></pre></div></div>
<p>我们发现<code class="highlighter-rouge">master</code>文件中的值存放的是一个commit的哈希值，这个hash值的内容为此次提交的记录</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#检查80ad70abd的内容</span>
➜  heads git:<span class="o">(</span>master<span class="o">)</span> git cat-file <span class="nt">-p</span> master
tree 80ad70abdfe2b44364c9ac0b412a244a700269e7 
parent 02c74583828e7e8d93c741fae34b07d65426f643
author user_name &lt;user_email&gt; 1546623228 <span class="nt">-0800</span>
committer user_name &lt;user_email&gt; 1546623228 <span class="nt">-0800</span>

Update<span class="o">(</span>auto commit<span class="o">)</span>
</code></pre></div></div>
<p>如果查看某次提交的具体内容，<code class="highlighter-rouge">.git</code>中<code class="highlighter-rouge">objects</code>文件夹内存放了本地提交的所有记录：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  objects git:<span class="o">(</span>master<span class="o">)</span> <span class="nb">ls
</span>00/   0b/   16/   21/   2c/   37/   42/   4d/   58/   
63/   6e/   79/   84/   8f/   9a/   a5/   b0/   bb/   
c6/   d1/   dc/   e7/   f2/   fd/ info/ pack/
</code></pre></div></div>
<p>如果<code class="highlighter-rouge">00-ff</code>均被使用，则git会对commit内容进行压缩，存放到<code class="highlighter-rouge">pack</code>目录下，在每个提交目录中可通过<code class="highlighter-rouge">git cat-file -p</code>查看提交的内容：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#哈希值前要加上目录值</span>
➜  00 git:<span class="o">(</span>master<span class="o">)</span> git cat-file <span class="nt">-p</span> 00262fc2da0013eb2c913ac8b7b85e59b5378be9 
<span class="nt">---</span>
layout: post
title: Computer Problems
<span class="nt">---</span>
</code></pre></div></div>

<h3 id="git对象之间的关系">Git对象之间的关系</h3>

<p>Git中有三种对象，分别是<code class="highlighter-rouge">Commit</code>，<code class="highlighter-rouge">Tree</code>和<code class="highlighter-rouge">Blob</code>。每种对象均有唯一的哈希值表示，每一个commit对应一个tree结构，每个tree中又包含tree和blob，如此递归嵌套，其中tree表示文件夹，blob表示文件，三者关系可如下图所示</p>

<p><img src="/assets/images/2011/02/git-objects.png" class="md-img-center" /></p>

<p>举一个实际的例子，假如我们在一个git仓库中创建了一个文件夹<code class="highlighter-rouge">doc</code>，在该目录下新创建了一个<code class="highlighter-rouge">readme</code>的文件</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└── doc
    └── readme.md
</code></pre></div></div>
<p>在执行<code class="highlighter-rouge">add</code>命令前，<code class="highlighter-rouge">.git/objects</code>的目录是空的，说明只创建文件git是不会将其加入到暂存区的。此时我们执行<code class="highlighter-rouge">add</code>操作，观察objects目录的变化</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> find .git/objects <span class="nt">-type</span> f
.git/objects/8d/0e41234f24b6da002d962a26c2495ea16a425f
<span class="o">&gt;</span> git cat-file <span class="nt">-t</span> 8d0e
blob
<span class="o">&gt;</span> git cat-file <span class="nt">-p</span>  8d0e
hello git
</code></pre></div></div>
<p>可知objects下生成了一个blob, 也就是我们的readme文件，内容为<code class="highlighter-rouge">hello git</code>。然后我们进行commit操作，objects目录下会生成四个对象，</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> find .git/objects <span class="nt">-type</span> f
.git/objects/da/e6876e15d84cdec59319806e39272c5d58e7c9
.git/objects/88/d0860df2c42bd9d9c2ed893eb43460a1871bbe
.git/objects/5d/6d9f8679f21ea8a190a9222aa8f4d3c38e6344
.git/objects/8d/0e41234f24b6da002d962a26c2495ea16a425f
</code></pre></div></div>
<p>我们逐个观察其类型</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> git cat-file <span class="nt">-t</span> dae6
commit
<span class="o">&gt;</span> git cat-file <span class="nt">-t</span> 88d0
tree
<span class="o">&gt;</span> git cat-file <span class="nt">-t</span> 5d6d
tree
<span class="o">&gt;</span> git cat-file <span class="nt">-t</span> 8d0e
blob
</code></pre></div></div>
<p>他们之间的关系如下图所示</p>

<p><img src="/assets/images/2011/02/git-objects-2.png" class="md-img-center" /></p>
:ET